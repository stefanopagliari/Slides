---
title: "International Politics Department"
subtitle: "Trends and Figures 2014-23"
author: "Stefano Pagliari"
theme: flatly
format: 
  html:
    toc-title: "IP Department 2014-22"
    toc: true
    toc-location: left
    top-depth: 4
    number-sections: true
    number-offset: 0
    shift-heading-level-by: -1
    fig-width: 10
    fig-height: 8
    code-fold: true
    embed-resources: true
cache: true
message: false
error: false
echo: false
warning: false
---

```{r setup}

#Load packages
library(tidyverse)
library(viridis)
library(ggtext)
library(RColorBrewer)
library(ggridges)
#Load packages
library(maps)
library(ggthemes)
library(countrycode)
library(readxl)
library(ggrepel)

#Load Dataset
DataIPApplicationsAndEnrollment <- read_excel("Data.xlsx", sheet = "IP Applications & Enrollment")

DataEnrollment <- read_excel("Data.xlsx", sheet = "Enrollment") 

DataStudentBackground <- read_excel("Data.xlsx", sheet = "Student Background")

DataApplicationsOffersByTariffs <- read_excel("Data.xlsx", sheet = "Applications Offers by Tariffs") |>
  unique()

DataSharedOffers <- read_excel("Data.xlsx", sheet = "Shared Offers") 

DataProgression <- read_excel("Data.xlsx", sheet = "UG Progression")

DataIPProgressionRecords <- read_excel("Data.xlsx", sheet = "IP Progression Records")

DataIPModuleResults <- read_excel("Data.xlsx", sheet = "IPModuleResults")


DataTariffs <- read_excel("Data.xlsx", sheet = "Tariffs")

DataIPAwards <- read_excel("Data.xlsx", sheet = "IPAwards")

DataPGApplications <- read_excel("Data.xlsx", sheet = "PG Applications")

DataPGAwards <- read_excel("Data.xlsx", sheet = "PG Awards")

DataPGEnrollment <- read_excel("Data.xlsx", sheet = "PG Enrollment")
  
DataPhDApplications <- read_excel("Data.xlsx", sheet = "PhD Applications")

DataPhDEnrolled <- read_excel("Data.xlsx", sheet = "PhD Enrolled")

DataModuleEvaluation <- read_excel("Data.xlsx", sheet = "Module Evaluation")

DataTeachingTimetabling <- read_excel("Data.xlsx", sheet = "TeachingTimetabling")

DataEmploymentGOS <- read_excel("Data.xlsx", sheet = "Employment-GOS")
DataEmploymentDHLE <- read_excel("Data.xlsx", sheet = "Employment-DHLE")

DataAssessment <- read_excel("Data.xlsx", sheet = "Assessment")

DataMarketShare <- read_excel("Data.xlsx", sheet = "Market Share") 

DataNSSHistorical <- read_excel("Data.xlsx", sheet = "NSS Historical")

# Create Elements

Custom_Col <- data.frame(matrix(ncol = 2, nrow = 0))
Custom_Col <- rbind(Custom_Col, 
                    c("BSc International Politics", "#8a0407"),
                    c("BSc International Politics and Sociology", "#ad0509"),
                    c("BSc International Political Economy", "#cf060b"),
                    c("BSc Politics", "#f8252a"),
                    c("BA History", "#fa6a6d"),
                    c("BA History and Politics", "#fb8d8f"),
                    c("BA History & Politics", "#fb8d8f"),
                    c("MA International Politics", "#111e6c"),
                    c("MA International Politics and Human Rights", "#0f52ba"),
                    c("MA Global Political Economy", "#57a0d3"),
                  c("MA Diplomacy and Foreign Policy", "#89cff0"),
                  c("PhD International Politics", "purple"),
                  c("UG", "#ad0509"),
                  c("PG", "#0f52ba"),
                  c("2014/5", "#98FF98"),
                  c("2015/6", "#7be27d"),
                  c("2016/7", "#5fc663"),
                  c("2017/8", "#41aa4a"),
                  c("2018/9", "#1e8f31"),
                  c("2019/0", "#007417"),
                  c("2020/1", "#005b00"),
                  c("2021/2", "#004200"),
                  c("2022/3", "#002d00")
    
                    )
colnames(Custom_Col) <- c("Label" ,"Custom_Colour")

Order_UG <- c("BSc International Politics", 
              "BSc International Politics and Sociology",
              "BSc International Political Economy",
              "BSc Politics",
              "BA History",
              "BA History and Politics"
              )
Order_PG <- c("MA International Politics", 
              "MA International Politics and Human Rights",
              "MA Global Political Economy",
              "MA Diplomacy and Foreign Policy")

Order_UGPG <- c(Order_UG, Order_PG)

Programme_Name = data.frame("Programme" = NA, "Programme_Old" = NA)
Programme_Name <- rbind(Programme_Name, 
                        c("PhD International Politics", "MSINPO"),
                        c("PhD International Politics", "MPhil PhD International Politics"),
                        c("BSc International Politics", "BSc International Politics"),
                        c("BSc International Politics", "International Politics"),
                        c("BSc International Politics", "International Politics with Study Abroad"),
                        c("BSc International Politics", "International Politics with Study Abroad and Integrated Professional Training"),
                        c("BSc International Politics and Sociology", "International Politics & Sociology"),
                        c("BSc International Politics and Sociology", "BSc International Politics & Sociology"),
                        c("BSc International Politics and Sociology", "International Politics AND Sociology AND International Politics AND Sociology"),
                        c("BSc International Politics and Sociology", "International Politics and Sociology and International Politics and Sociology"),
                        c("BSc International Politics and Sociology", "International Politics AND Sociology with Integrated Professional Training"),
                         c("BSc International Politics and Sociology", "International Politics and Sociology"),
                        c("BSc International Politics and Sociology", "International Politics AND Sociology"),
                        c("BSc International Political Economy", "International Political Economy with Integrated Professional Training"),
                                                c("BSc International Political Economy", "International Political Economy with Study Abroad"),
                         c("BSc International Political Economy", "BSc International Political Economy"),
                        c("BSc International Political Economy", "International Political Economy"),
                         c("BSc International Political Economy", " International Political Economy with Study Abroad"),
                        c("BSc Politics", "Politics"),
                        c("BSc Politics", "BSc in Politics"),

                        c("BSc Politics", "BSc Politics"),
                        c("BA History and Politics", "BA History and Politics"),
                        c("BA History and Politics", "History and Politics"),
                        c("BA History and Politics", "BA History & Politics"),
           c("BA History", "BA History"),
           c("BA History", "History"),
          c("MA Diplomacy and Foreign Policy", "PSDIPF"),
          c("MA Diplomacy and Foreign Policy", "MA Diplomacy and Foreign Policy"),
          c("MA Global Political Economy", "PSGBPE"),
          c("MA Global Political Economy", "MA Global Political Economy"),
          c("MA International Politics", "PSINPO"),
          c("MA International Politics", "MA International Politics"),
          c("MA International Politics and Human Rights", "PSIPHR"),
          c("MA International Politics and Human Rights", "MA International Politics and Human Rights"),
          c("MA International Politics and Human Rights", "MA International Politics & Human Rights FT"),
           c("MA International Politics and Human Rights", "MA International Politics & Human Rights PT"),
          c("BSc International Politics", "BSc in International Politics"),
          c("BSc International Politics and Sociology", "BSc in International Politics and Sociology"),
          c("MA International Politics", "MA International Politics FT"),
          c("MA International Politics", "MA International Politics PT"),
         c("MPhil/PhD in International Politics", "MPhil/PhD in International Politics FT (SEPT)"),
         c("MPhil/PhD in International Politics", "MPhil/PhD in International Politics PT (Sept)"),
        c("MPhil/PhD in International Politics", "MPhil/PhD in International Politics EXT FT"),

        c("MA Diplomacy and Foreign Policy", "MA Diplomacy and Foreign Policy FT"),
          c("MA Global Political Economy", "MA Global Political Economy FT"),

          c("MA International Politics and Human Rights", "MA International Politics & Human Rights FT"),
         c("MA International Politics and Human Rights", "MA International Politics & Human Rights PT"),
          c("MA Global Political Economy", "MA Global Political Economy PT"),
           c("MA Diplomacy and Foreign Policy", "MA Diplomacy and Foreign Policy PT"),
 c("MPhil/PhD in International Politics", "MPhil/PhD in International Politics FT (JAN)"),
 c("BSc Politics", "USPOSA"),
           c("BSc Politics", "USPOLS"),
           c("BSc Politics", "USPIPT"),
            c("BSc International Politics and Sociology", "USIPSA"),
           c("BSc International Politics and Sociology", "USIPSI"),
           c("BSc International Politics", "USIPRY"),
           c("BSc International Politics", "USIPOY"),
           c("BSc International Politics", "USIPOL"),
           c("BSc International Politics", "USIPOC"),
           c("BSc International Politics", "UJIPSA"),
           c("BSc International Political Economy", "USIPEY"),
           c("BSc International Political Economy", "USIPES"),
           c("BSc International Political Economy", "USIPEC"),
           c("BSc International Politics", "USIFSI"),
           c("BA History", "USHIST"),
           c("BA History", "USHISA"),
           c("BSc International Politics and Sociology", "UJIPOS"),
           c("BSc International Politics and Sociology", "UJIPOY"),
           c("BSc International Politics and Sociology", "UJIPSA"),
           c("BA History and Politics", "UJHIPO"),
            c("BA History and Politics", "IPUHAP"))

        
Programme_Name <- unique(Programme_Name)                       

```

## Our Students  

### New Students Enrolled

```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  mutate(Level = case_match(
    Level,
    "Undergraduate" ~ "UG",
    "Postgraduate Taught" ~ "MA",
    "Postgraduate Research" ~ "PhD"
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  #mutate(Programme = factor(Programme, Order_UG)) %>%
  #arrange(factor(Programme)) |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Level)) |>
  #left_join(Custom_Col, by = join_by(Level == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Level = fct_relevel(Level, c("UG", "MA","PhD"))) %>%
  arrange(factor(Level))



ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = Level),
           stat = "identity") +
  #  geom_text(aes(x = Year, 
  #                y = NumStudent,
  #                fill = Programme,
  #                label = NumStudent),
  #            size = 2,
  #            colour = "white",
  #            position = position_stack(vjust = 0.5),
  #            fontface = "bold") +
  geom_text(aes(x = Year, 
                y = NumStudentYear + 10,
                label = NumStudentYear),
            size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values =  c("#ad0509","#0f52ba", "purple")) +
  labs(title = "Enrollment Across all Programmes",
       x = "Year",
       y = "Students",
       fill= "") +
  theme(legend.position = "top") 
 # guides(fill=guide_legend(nrow=3, byrow=TRUE))

```

### Total Number of Students
```{r}
#Data <- read_excel("Data.xlsx", sheet = "IP Applications & Enrollment")
DataEnrollment |>
  left_join(Programme_Name, by = join_by(`Route code` == Programme_Old)) |>
  drop_na(Programme) |>
  filter(Block != "2D") |>
  filter(Block != "RS") |>
  filter(Block != "R2") |>
  filter(Block != "R3") |>
  filter(Block != "R1") |>
  filter(Block != "A1") |>
  filter(Block != "A2") |>
  filter(Block != "A3") |>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) |>
  drop_na(Level) |>
  summarize(NumStudent = n_distinct(Student), 
            .by = c(Year, Level)) |>
  #left_join(Custom_Col, by = join_by(Level == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentYear)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  ))|>
  mutate(Level = fct_relevel(Level,
                             c("Undergrad Degree", "Postgrad Taught Masters", "Research"))) |>
  ggplot() +
  geom_col(aes(x = Year,
               y = NumStudent,
               fill = Level),
           position = "stack") +
  geom_text(aes(x = Year, 
                y = NumStudentYear+20,
                label = NumStudentYear),
            size = 2,
            colour = "black",
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values =  c("#ad0509","#0f52ba", "purple")) +
  labs(title = "Total Enrolled Students",
       x = "",
       y = "",
       fill= "") +
  theme(legend.position = "top")
```
 

### Students by Level

```{r}

DataEnrollmentEdit <- DataEnrollment |>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) 
#group_by(Student) |>
#mutate(rank = row_number(Year)) |>
#filter(rank == 1)

DataStudentBackgroundEdit <- DataStudentBackground |>
  select(Student = `Student code`,
         Gender,
         Nationality,
         Ethnic = `Ethnic Origin`,
         LEA,
         Accomodation = `Term-time Accommodation`,
         Fee = `Fee Status code`
  )  |>
  mutate(Student = as.character(Student)) |>
  left_join(DataEnrollmentEdit) |>
  drop_na(Year) 

DataStudentBackgroundEdit |>
  mutate(Status = case_match(
    Fee,
    "H" ~ "Home",
    "O" ~ "EU/Overseas",
    "E" ~ "EU/Overseas",
    "H-ELQ" ~ "EU/Overseas",
  )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Level)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentYear)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  )) |>
  drop_na(Level) |>
  drop_na(Level) |>
  mutate(Level = fct_relevel(Level,
                             c("Undergrad Degree", "Postgrad Taught Masters", "Research"))) |>
  ggplot() +
  geom_col(aes(x = Year,
               y = PercStudent,
               fill = Level),
           position = "fill") +
  geom_text(aes(x = Year, 
                y = PercStudent,
                fill = Level,
                label = PercStudentLabel),
            size = 2,
            colour = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold") +
  
  theme_classic() +
  scale_fill_manual(values =  c("#ad0509","#0f52ba", "purple")) +
  labs(title = "IP Department Students by Level",
       x = "",
       y = "",
       fill= "") +
  theme(legend.position = "top")+
  scale_y_continuous(labels = scales::percent) +
  theme(axis.text.y = element_blank())

```

### Students by Origin (Enrollment)

```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  mutate(Level = case_match(
    Level,
    "Undergraduate" ~ "UG",
    "Postgraduate Taught" ~ "MA",
    "Postgraduate Research" ~ "PhD"
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  #mutate(Programme = factor(Programme, Order_UG)) %>%
  #arrange(factor(Programme)) |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Status)) |>
  #left_join(Custom_Col, by = join_by(Level == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentYear)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  )) |>
  mutate(Status = fct_relevel(Status, c("Home", "EU/Overseas"))) %>%
  drop_na(Status)



ggplot(Data_Edit) +
  geom_col(aes(x = Year,
               y = PercStudent,
               fill = Status),
           position = "stack") +
  geom_text(aes(x = Year, 
                y = PercStudent,
                fill = Status,
                label = PercStudentLabel),
            size = 2,
            colour = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold") +
  
  theme_classic() +
  scale_fill_manual(values =  c("#ad0509","#0f52ba")) +
  labs(title = "Enrollment of New Students Across all Programmes",
       x = "Year",
       y = "Students",
       fill= "") +
  theme(legend.position = "top") 
# guides(fill=guide_legend(nrow=3, byrow=TRUE))
```

### Students by Gender

```{r}
DataEnrollmentEdit <- DataEnrollment|>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) 
#group_by(Student) |>
#mutate(rank = row_number(Year)) |>
#filter(rank == 1)

DataStudentBackgroundEdit <- DataStudentBackground |>
  select(Student = `Student code`,
         Gender,
         Nationality,
         Ethnic = `Ethnic Origin`,
         LEA,
         Accomodation = `Term-time Accommodation`,
         Fee = `Fee Status code`
  )  |>
  mutate(Student = as.character(Student)) |>
  left_join(DataEnrollmentEdit) |>
  drop_na(Year) 

DataStudentBackgroundEdit |>
  summarize(NumStudent = n(), 
            .by = c(Year, Gender)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentYear)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  )) |>
  drop_na(Gender) |>
  ggplot() +
  geom_col(aes(x = Year,
               y = PercStudent,
               fill = Gender),
           position = "stack") +
  geom_text(aes(x = Year, 
                y = PercStudent,
                fill = Gender,
                label = PercStudentLabel),
            size = 2,
            colour = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold") +
  
  theme_classic() +
  scale_fill_brewer(palette = "RdYlBu") +
  labs(title = "IP Department Students by Gender",
       x = "",
       y = "",
       fill= "") +
  theme(legend.position = "top") 
```


### Students by Council

```{r}

InnerLondon <- c(
"Camden",
"City of London",
"Corporation of London",
"Hackney",
"Hammersmith & Fulham",
"Islington",
"Kensington & Chelsea",
"Lambeth",
"Lewisham",
"Southwark",
"Tower Hamlets",
"Wandsworth",
"Westminster")

OuterLondon <- c(
  "Barking & Dagenham",
  "Barking",
  "Barnet",
  "Bexley",
  "Brent",
  "Croydon",
  "Ealing",
  "Enfield",
  "Greenwich",
  "Haringey",
  "Harrow",
  "Havering",
  "Hillingdon",
  "Hounslow",
  "Kingston-upon-Thames",
  "Merton",
"Newham",
"Redbridge",
"Richmond-upon-Thames",
"Sutton",
"Waltham Forest",
"Haringey")



DataEnrollmentEdit <- DataEnrollment |>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) 
  #group_by(Student) |>
  #mutate(rank = row_number(Year)) |>
  #filter(rank == 1)

DataStudentBackgroundEdit <- DataStudentBackground |>
  select(Student = `Student code`,
         Gender,
         Nationality,
         Ethnic = `Ethnic Origin`,
         LEA,
         Accomodation = `Term-time Accommodation`,
         Fee = `Fee Status code`
         )  |>
  mutate(Student = as.character(Student)) |>
  left_join(DataEnrollmentEdit) |>
  drop_na(Year) 

DataStudentBackgroundEdit |>
  mutate(Borough = case_when(
    is.na(LEA)==F ~ "Outside London",
    .default = NA)) |>
  mutate(Borough = case_when(
    LEA %in% InnerLondon ~ "Inner London",
    LEA %in% OuterLondon ~ "Outer London",
    .default = Borough)) |> 
  drop_na(Borough) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Borough)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentYear)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  )) |>
  mutate(Borough = fct_relevel(Borough, c("Inner London", "Outer London", "Outside London"))) %>%
  ggplot() +
  geom_col(aes(x = Year,
               y = PercStudent,
               fill = Borough),
           position = "stack") +
  geom_text(aes(x = Year, 
                y = PercStudent,
                fill = Borough,
                label = PercStudentLabel),
            size = 2,
            colour = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold") +

  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("#8a0407","#cf060b", "#fb8d8f")) +
  labs(title = "IP Department Home Students by Local Council",
       x = "",
       y = "",
       fill= "") +
  theme(legend.position = "top") 
   
 
  
```


### Students by Accommodation

```{r}


DataEnrollmentEdit <- DataEnrollment |>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) 
  #group_by(Student) |>
  #mutate(rank = row_number(Year)) |>
  #filter(rank == 1)

DataStudentBackground  |>
  select(Student = `Student code`,
         Gender,
         Nationality,
         Ethnic = `Ethnic Origin`,
         LEA,
         Accomodation = `Term-time Accommodation`,
         Fee = `Fee Status code`
         )  |>
  mutate(Student = as.character(Student)) |>
  left_join(DataEnrollmentEdit) |>
  drop_na(Year) |>
  mutate(Accomodation = case_match(
    Accomodation,
    "Parental/guardian home" ~ "Parental/guardian home",
    "Own residence" ~ "Own residence",
    "Not in attendance at the institution" ~ NA,
    "Not known" ~ NA,
    .default = Accomodation
  )) |>
  drop_na(Accomodation) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Accomodation)) |>
    group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentYear)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  )) |>
  mutate(Accomodation = fct_relevel(Accomodation, c("Parental/guardian home", "Own residence", "Other", "Private-sector halls", "Other rented accommodation"))) %>%
  ggplot() +
  geom_col(aes(x = Year,
               y = PercStudent,
               fill = Accomodation),
           position = "stack") +
  geom_text(aes(x = Year, 
                y = PercStudent,
                fill = Accomodation,
                label = PercStudentLabel),
            size = 2,
            colour = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold") +
  theme_classic() +
  #scale_fill_manual(values =  c("#ad0509","#0f52ba")) +
  labs(title = "IP Department Students by Accommodation",
       x = "",
       y = "",
       fill= "") +
  theme(legend.position = "top")  +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_brewer(palette = "Spectral")
  
   
 
  
  
   
 
  
```

### UK Students by Area (UG)

```{r}



DataEnrollmentEdit <- DataEnrollment  |>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) 


Data_Edit <- DataStudentBackground |>
  select(Student = `Student code`,
         Gender,
         Nationality,
         Ethnic = `Ethnic Origin`,
         LEA,
         Accomodation = `Term-time Accommodation`,
         Fee = `Fee Status code`
         )  |>
  mutate(Student = as.character(Student)) |>
  left_join(DataEnrollmentEdit) |>
  drop_na(Year) |>
  summarize(NumStudent = n(), 
            .by = c(LEA)) |>
  drop_na(LEA) |>
  mutate(NumStudentTotal = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentTotal)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  )) |>
  mutate(LEA = case_match(
    LEA,
    "Bedfordshire" ~ "Central Bedfordshire",
    "Windsor & Maidenhead" ~ "	Royal Borough of Windsor and Maidenhead",           
    "City of London" ~ "City of London",           
    "Bristol City Council" ~ "Bristol",
    "Barking" ~ "Barking and Dagenham",           
    "Bath and NE Somerset Council" ~ "Bath and North East Somerset",              
    "Hammersmith & Fulham" ~ "Hammersmith and Fulham",
    "Kensington & Chelsea" ~ "Kensington and Chelsea",           
    "RB Kingston-upon-Thames" ~ "Kingston upon Thame",           
    "North Lincolnshire Council" ~ "North Lincolnshire",           
    "Brighton & Hove" ~ "Brighton and Hove",           
    "York City Council" ~ "York",           
    "Leicester City"~ "Leicester",           
    "City of Aberdeen" ~ "Aberdeen",           
    "Richmond-upon-Thames" ~ "Richmond upon Thames",           
    "The Wrekin" ~ "Telford and Wrekin",                              
    "City of Nottingham" ~ "Nottingham",           
    "East Riding Council" ~ "East Riding of Yorkshire",                       
    "The Vale of Glamorgan" ~ "Vale of Glamorgan",           
    "Powys County Council" ~ "Powys",           
    "E Lothian" ~ "East Lothian",           
    "Newcastle-upon-Tyne" ~ "Newcastle upon Tyne",                       
    "Cardiff County Council"  ~ "Cardiff",           
    "Cheshire" ~ "Cheshire East",                                  
    "St Helens" ~ NA,           
    "City and County of Swansea" ~ "Swansea",                
    "Jersey" ~ NA,           
    "North East Lincolnshire Council" ~ "North East Lincolnshire",      
    .default = LEA
  ))
  
  #remotes::install_github("ropensci/rnaturalearthhires")
  library(rnaturalearth) # for map data
uk_sf <- ne_states(country = "united kingdom", returnclass = "sf")

uk_sf <- uk_sf |>
  left_join(Data_Edit, by = c("name" = "LEA")) |>
  mutate(longitude = case_when(
    is.na(NumStudent) ~ NA,
    .default = longitude
  )) |>
  mutate(latitude = case_when(
    is.na(NumStudent) ~ NA,
    .default = latitude
  ))
  

library(rnaturalearth)  
uk <- ne_countries(  
  scale = "medium", returnclass = "sf") %>%  
  select(name, continent, geometry) %>%  
  filter(name == 'United Kingdom')

ggplot(data = uk_sf) +  
  ggplot2::geom_sf(data = uk) +  
  geom_point(aes(x = longitude,
                 y = latitude,
                 color = NumStudent, 
                 size = NumStudent^2),
             alpha = .3,
             show.legend = FALSE) +
  scale_colour_continuous(high = "#132B43", low = "#56B1F7") +
  theme_bw() +
  theme(axis.title = element_blank()) +
  coord_sf(xlim = c(-8.2, 2),
           ylim = c(49.9, 59),
           expand = FALSE) +
  labs(title = "UK Students by Area",  
       subtitle = "IP Department - 2014-2022")


 
   
 
  
```


```{r}


DataEnrollmentEdit <- DataEnrollment |>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) 
  #group_by(Student) |>
  #mutate(rank = row_number(Year)) |>
  #filter(rank == 1)

Data_Edit <- DataStudentBackground |>
  select(Student = `Student code`,
         Gender,
         Nationality,
         Ethnic = `Ethnic Origin`,
         LEA,
         Accomodation = `Term-time Accommodation`,
         Fee = `Fee Status code`
         )  |>
  mutate(Student = as.character(Student)) |>
  left_join(DataEnrollmentEdit) |>
  drop_na(Year)  |>
  summarize(NumStudent = n(), 
            .by = c(LEA)) |>
  drop_na(LEA) |>
  mutate(NumStudentTotal = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentTotal)  |>
  mutate(PercStudentLabel = case_when(
    PercStudent > 0.03 ~ paste0(round(PercStudent, digits = 2)*100,"%"),
    .default = NA
  )) |>
  mutate(LEA = case_match(
    LEA,
    "Bedfordshire" ~ "Central Bedfordshire",
    "Windsor & Maidenhead" ~ "	Royal Borough of Windsor and Maidenhead",           
    "City of London" ~ "City of London",           
    "Bristol City Council" ~ "Bristol",
    "Barking" ~ "Barking and Dagenham",           
    "Bath and NE Somerset Council" ~ "Bath and North East Somerset",              
    "Hammersmith & Fulham" ~ "Hammersmith and Fulham",
    "Kensington & Chelsea" ~ "Kensington and Chelsea",           
    "RB Kingston-upon-Thames" ~ "Kingston upon Thame",           
    "North Lincolnshire Council" ~ "North Lincolnshire",           
    "Brighton & Hove" ~ "Brighton and Hove",           
    "York City Council" ~ "York",           
    "Leicester City"~ "Leicester",           
    "City of Aberdeen" ~ "Aberdeen",           
    "Richmond-upon-Thames" ~ "Richmond upon Thames",           
    "The Wrekin" ~ "Telford and Wrekin",                              
    "City of Nottingham" ~ "Nottingham",           
    "East Riding Council" ~ "East Riding of Yorkshire",                       
    "The Vale of Glamorgan" ~ "Vale of Glamorgan",           
    "Powys County Council" ~ "Powys",           
    "E Lothian" ~ "East Lothian",           
    "Newcastle-upon-Tyne" ~ "Newcastle upon Tyne",                       
    "Cardiff County Council"  ~ "Cardiff",           
    "Cheshire" ~ "Cheshire East",                                  
    "St Helens" ~ NA,           
    "City and County of Swansea" ~ "Swansea",                
    "Jersey" ~ NA,           
    "North East Lincolnshire Council" ~ "North East Lincolnshire",      
    .default = LEA
  ))
  
  #remotes::install_github("ropensci/rnaturalearthhires")
  library(rnaturalearth) # for map data
uk_sf <- ne_states(country = "united kingdom", returnclass = "sf")

uk_sf <- uk_sf |>
  left_join(Data_Edit, by = c("name" = "LEA")) |>
  mutate(NumStudent = case_match(
    NumStudent,
    NA ~ 0,
    .default = NumStudent
  )) |>
  mutate(longitude = case_when(
    is.na(PercStudentLabel)==T ~ NA,
    .default = longitude,
  )) |>
  mutate(latitude = case_when(
    is.na(PercStudentLabel)==T ~ NA,
    .default = latitude,
  )) |>
  mutate(PercStudentLabel2 = case_when(
    is.na(PercStudentLabel)==F ~paste0(name, " (", PercStudentLabel, ")"),
    .default = NA
  ))
  

ggplot(data = uk_sf) + 
  geom_sf(aes(fill = NumStudent)) +
  geom_point(mapping = aes(x = longitude, 
                           y = latitude),
                           colour = "white",
             size = 1) +
  geom_point(mapping = aes(x = -0.102067, 
                           y = 51.52717),
             colour = "darkred") +
  annotate("text", 
           x = -0.102067, 
           y = 51.53717, 
           label = "City",
           colour = "darkred",
           size = 4) +
  geom_label_repel(mapping = aes(x = longitude, 
                                 y = latitude, 
                                 label = PercStudentLabel2),
                                 max.overlaps = Inf,
                                box.padding = 0.5, 
                   size = 3) +
  theme_minimal() +
  scale_fill_gradient2()+
  coord_sf(xlim = c(-0.7, 0.5),
           ylim = c(51.2, 51.8),
           expand = FALSE) +
  labs(title = "UK Students by Area",  
       subtitle = "IP Department - 2014-2022",
       fill = "N. UK Students",
       x = "",
       y = "") +
  theme(legend.position = "bottom") +
  theme(axis.text = element_blank())
  

```


### Foreign Students by Country

```{r}
 

DataEnrollmentEdit <- DataEnrollment |>
  select(Student = `Student Course Join code`,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`)|>
  mutate(Student = as.character(str_sub(Student, 1, 9))) 
  #group_by(Student) |>
  #mutate(rank = row_number(Year)) |>
  #filter(rank == 1)

DataStudentBackgroundEdit <- DataStudentBackground |>
  select(Student = `Student code`,
         Gender,
         Nationality,
         Ethnic = `Ethnic Origin`,
         LEA,
         Accomodation = `Term-time Accommodation`,
         Fee = `Fee Status code`
         )  |>
  mutate(Student = as.character(Student)) |>
  left_join(DataEnrollmentEdit) |>
  drop_na(Year) 

library(countrycode)
Data_Edit <- DataStudentBackgroundEdit |>
  mutate(Nationality = countryname(Nationality, destination = "cldr.short.en", warn = TRUE)) |>
  filter(Fee != "H") |>
  filter(Nationality != "UK") |>
  summarize(NumStudent = n(), 
            .by = c(Nationality)) |>
  drop_na(Nationality) |>
  mutate(NumStudentTotal = sum(NumStudent))  |>
  mutate(PercStudent = NumStudent/NumStudentTotal)  |>
  mutate(PercStudent = replace_na(PercStudent, 0)) |>
  mutate(rank = row_number(desc(PercStudent))) |>
  mutate(PercStudentLabel = case_when(
    rank < 15 ~ paste0(Nationality, 
                       " (",
                       round(PercStudent, digits = 2)*100,
                       "%)"),
    .default = NA
  ))



#Load packages
library(maps)
library(ggthemes)


#Load World Map

world <- ggplot2::map_data("world")


world2 <- world |>
  mutate(region =  countryname(region, destination = "cldr.short.en", warn = TRUE))


#Join the world map and gapminder

world2 <- left_join(world2, Data_Edit, by = c("region" = "Nationality")) |>
  mutate(PercStudent = replace_na(PercStudent, 0)) 
  

#Plot
ggplot(data = world2) + 
  geom_map(map = world2,
           aes(x = long, 
               y = lat, 
               map_id = region,
               fill = PercStudent)) +
  theme_map() +
  labs(title = "Nationality of Foreign Students 2014-2022",
       fill = "% Foreign Students") +
  scale_fill_gradient(high = "darkblue",
                      low = "lightgrey", 
                      na.value = "#e6ffff",
                      labels = scales::percent)  
  

   
 
  
```


### Student Staff Ratio

```{r}


Data <- read_excel("Data.xlsx", sheet = "SSR") |>
  pivot_longer(cols = c("City", "UK", "London"),
               names_to = "Unit",
               values_to = "SSR") |>
  rename(Year = `Academic Year`)
 


ggplot(Data) +
  geom_point(aes(x = Year,
                 y = SSR,
                 color = Unit)) +
  geom_line(aes(x = Year,
                y = SSR,
                group = Unit,
                color = Unit)) +
  facet_wrap(~Area) +
  ylim(00, 27.5) +
  theme_linedraw() +
  theme(legend.position = "top") +
  labs(title = "Student-Staff Ratio",
       subtitle = "",
       caption = "Source: City's Strategy, Planning and Performance Unit",
       x = "",
       y = "",
       fill = "")  
   
```

## Teaching  

### Number of Modules


```{r}

 
Data_Edit <- DataIPModuleResults %>%
  select(ModuleCode = 'Module code',
         Year = `Academic Year code...6`,
         Result = `Result of Module`,
         Grade = `Formatted agreed mark`,
         Outcome = `Agreed grade`,
         Level = "Level code",
         Student = "Student Candidate Number",
         EntryYear = "Year of entry",
         Outcome = `Agreed grade`,
         Attempt = "Current Attempt") |>
  #group_by(Student, ModuleCode, Year) |>
  #mutate(rank = row_number(desc(Attempt))) |>
  group_by(Year, Level) |>
  summarise(Num_Module = n_distinct(ModuleCode)) |>
  group_by(Year) |>
  mutate(Num_Module_Total = sum(Num_Module)) |>
  mutate(Level = case_match(
    Level,
    "PT" ~ "MA",
    "U1" ~ "UG1",
    "U2" ~ "UG2",
    "U3" ~ "UG3"
  )) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA")))


## Number of modules
ggplot(Data_Edit) +
  geom_col(aes(x = Year,
               y = Num_Module,
               fill = Level),
           position = "stack") +
 # geom_text(aes(x = Year, 
 #               y = Num_Module,
 #               fill = Level,
 #               label = Num_Module),
 #           size = 2,
 ##           colour = "white",
 #           position = position_stack(vjust = 0.5),
 #           fontface = "bold") +
  geom_text(aes(x = Year, 
                 y = Num_Module_Total + 1.5,
                 label = Num_Module_Total),
             size = 2.5) +
  theme_classic() +
  scale_fill_manual(values = c("#fa6a6d", "#cf060b", "#8a0407", "#0f52ba")) +
  labs(title = "Number of Taught Modules - IP Department",
       x = "Year",
       y = "Modules") +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 90))
  
   

 
```

### Size of Modules

```{r}


library(ggbeeswarm)
Data_Edit <- DataIPModuleResults %>%
  select(ModuleCode = 'Module code',
         Year = `Academic Year code...6`,
         Result = `Result of Module`,
         Grade = `Formatted agreed mark`,
         Outcome = `Agreed grade`,
         Level = "Level code",
         Student = "Student Candidate Number",
         EntryYear = "Year of entry",
         Outcome = `Agreed grade`,
         Attempt = "Current Attempt") |>
  #group_by(Student, ModuleCode, Year) |>
  #mutate(rank = row_number(desc(Attempt))) |>
  mutate(Level = case_match(
    Level,
    "PT" ~ "MA",
    "U1" ~ "UG1",
    "U2" ~ "UG2",
    "U3" ~ "UG3"
  )) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA"))) |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  group_by(Year, Level, ModuleCode) |>
  summarise(Students = n_distinct(Student))




Data_Edit_Summary <- Data_Edit |>
  group_by(Year) |>
  summarise(MedianY1 = median(Students[Level =="UG1"]),
            MedianY2 = median(Students[Level =="UG2"]),
            MedianY3 = median(Students[Level =="UG3"]),
            MedianMA = median(Students[Level =="MA"]),
            Median = median(Students)) 



ggplot(Data_Edit) +
  geom_beeswarm(aes(x=Year,
                    y = Students,
                    color =  Level),
                cex = 1) +
  stat_summary(aes(x=Year,
                   y = Students),
               fun.y = median, 
               fun.ymin = median, 
               fun.ymax = median,
               geom = "crossbar", width = 0.5,
               color = "gray") +
  geom_text(data = Data_Edit_Summary,
            aes(x=Year,
                y = -50,
                label = paste0("Median \n",
                               "UG1: ", MedianY1, "\n",
                               "UG2: ", MedianY2, "\n",
                               "UG3: ", MedianY3, "\n",
                               "MA: ", MedianMA, "\n",
                               "All:", Median)),
            size = 1.5) +
  labs(title = "Number of Students per Module",
       subtitle = "Line indicate the median value",
       x = "",
       y = "Number of Students",
      ) +
  theme_light() +
  scale_color_manual(values = c("#fa6a6d", "#cf060b", "#8a0407","#111e6c")) +  
  theme(legend.position = "bottom") +
  ylim(-70, 240)
 
   
  


```

### Module Delivery (VL vs. FT)


```{r}


FT <- c(
   "Rasaratnam, Madura","Davies, Tom",
   "Blunt, David Dr.",
   "Slootmaeckers, Koen",
   "Sgambati, Stefano",
   "Benton, Allyson",
   "Fleischmann, Leonie",
   "Hager, Sandy",
   "Fainberg, Dina",
   "Aran, Amnon",
   "Rosenboim, Or",
   "Nesvetailova, Anastasia",
   "Palan, Ronen",
   "Schouenborg, Laust",
   "Kutlay, M",
   "Voessing, K",
   "Barnes, Dayna",
   "Samman, Amin",
   "Butler, Lise",
   "Kovras, Iosif",
   "Hoffman, Rachel",
   "Furse, Thomas",
   "Swenson, G",
   "McDowell, Chris",
   "Murphy, Richard",
   "Barnes, D",
   "Ban, C",
   "Henow, A",
   "Slootmaeckers, K",
   "Purnell, K",
   "Parmar, Inderjeet",
   "Silvestri, Sara",
   "Kutlay, Mustafa",
   "Lanoszka, Alexander",
   "Hollis, Rosemary",
   "Erbel, Mark",
   "Dafe, Florence",
   "Lanoszka, Alexander/Rasaratnam, Madura",
   "Sgambati, Stefano/Gandrud, Christopher",
   "Rasaratnam, Madura/Sgambati, Stefano",
   "Pinkerton, Patrick",
   "Srnicek, Nick",
   "Gandrud, Christopher",
   "Hirst, Aggie",
   "Sgambati, Stefano/Nesvetailova, Anastasia",
   "Davies, Robert/Hollis, Rosemary",
   "Hoover, Joe/Hirst, Aggie",
   "Hoover, Joe",
   "Palan, Ronen/Nesvetailova, Anastasia","Kapadia, Anush",
   "Palan, Ronen/Gandrud, Christopher",
   "Collantes-Celador, Gemma/McDowell, Chris",
   "Collantes-Celador, Gemma",                 
   "McDowell, Chris/Hollis, Rosemary",
   "Palan, Ronen/Hollis, Rosemary",
   "Swenson, Geoff",
   "Voessing, Konstantin",
   "Mulich, Jeppe",
   "Sundaram, Sasikumar",
   "Siqueira Machado, Pedro",
   "Loughlin, Neil",
   "Starrs, Sean",
   "Rabinovich, Joel",
   "Godziewski, Charlotte",
   "Valdez, Jimena",
   "Rikap, Cecilia",
   "Pagliari, Stefano",
   "Grieco, Giuseppe",
   "Myers, Matt",
   "Grieco, Giuseppe",
   "Rademacher, Inga",
   "Butler, Lise/Jones, Louise",
   "Dutta, Sahil",
   "Rabinovich, Joel/Rikap, Cecilia",
   "Oksamytna, Kseniya",
   "Innes, Alexandria" 
)
               
VL <- c("Grant, Peter",
        "Hall, Jonathan" ,
        "Wei, Xinyi",
        "Dharani, Bava",
        "Gauthier, Charlotte",
        "Saich, Richard",
        "Riding, T",
        "Rosa, Brunello" ,
        "Rosina, Matilde",
        "Inns, Michael",
        "Hamilton, Michael",
        "Toby, Bromige",
        "Strieff, Daniel",
        "Davis Smith, Justin",
        "Kilgore, Arthur",
        "Shah, Atul",
        "Skandarajah, Ranjith",
        "Kanapathipillai, V",
        "De Medeiros, J",
        "Rajic, I",
        "Davies, Robert",
        "Alves, Carolina",
        "Tazzioli, Martina",
        "Ledwidge, Mark",
        "Bonizzi, Bruno",
        "King, Elvira",
        "Guldberg, Christoffer" ,
        "Bromige, Toby",
        "Clark, Antonia",
        "Giannakopoulos, George",
        "Adisonmez, Umut Can",
        "Smith, Jacob",
        "Rajith, Ayshwarya",
        "Ackerley, Aaron",
        "Mazzola, Francisco",
        "Fagg, Adam",
        "Bondarenko, Olesksiy",
        "Suzuki, Satona",
        "Stacey, Emily",
        "Nguyen, Maya",
         "Lallouet, Morvan",
        "Munro, Ellie")

PhD <- c("Wilson, Lisa", 
         "Koch, Timo" ,
         "Zorlu, Begum",
         "Taylor, Sahra",
         "Ojo, P",
         "Nouri, Omid",
         "Pyle, Jenaline",
         "Jafri Madani, Juvaria",
         "Lysandrou, Photis",
         "Choudry, Imran",
         "Yishayahu, Gad",
         "Nouri, Bamo",
         "Mangraviti, Giovanni",
         "Karpanos, I",
         "Guter-Sandu, Andrei",
         "Kuznetsova, Elizaveta",
         "Hooper, Thomas",
         "Kashyap, Shreeya",
         "Panizzolo, Seila",
         "Taylor, D",
         "Taylor, Sarah",
         "Sandu, Andrei",
         "De Silva, Natasha",
         "Peterson, Hannah",
         "Sabbagh, Hisham",
         "Sarno, Yulia",
         "Murau, Steffen",
         "Biswas, Niloy",
         "Fotou, Myriam",
         "Ojo, Patrick",
         "Lepers, Etienne",
         "Tomara, Evangelia",
         "Choudhury, Imran",
         "Papadopoulou, Aggela",
         "Poullikka, Agni",
         "Imanova, Aimira" 
         
         )

    
                                        
 

Data_Edit <- DataTeachingTimetabling |>
  mutate(Staff_Type =
           (case_match)(Staff,
                      FT ~ "FT",
                      PhD ~ "PhD Student",
                      VL ~ "Visiting Lecturer",
                      .default = NA)) |>
  mutate(Staff_Type = case_when(
    Staff == "Giannakopoulos, George" & AcademicYear != "2021/22" ~ "Visiting Lecturer",
    Staff == "Giannakopoulos, George" & AcademicYear != "2022/23" ~ "Visiting Lecturer",
    str_detect(Staff, "VL") ~ "Visiting Lecturer",
    str_detect(Staff, "IP TA") ~ "Visiting Lecturer",
    .default = Staff_Type
  )) |>
  mutate(Level = case_when(
    str_sub(Activity, 3, 3)=="1" ~ "UG1",
    str_sub(Activity, 3, 3)=="2" ~ "UG2",
    str_sub(Activity, 3, 3)=="3" ~ "UG3",
    str_sub(Activity, 3, 3)=="M" ~ "MA"),
    .default = NA)  |>
  drop_na(Level) |>
  mutate(Hours = case_when(
    str_detect(as.character(Duration), "01:00:00") ~ 1,
    str_detect(as.character(Duration), "02:00:00") ~ 2,
    str_detect(as.character(Duration), "03:00:00") ~ 3,
    str_detect(as.character(Duration), "01:30:00") ~ 1.5,
    .default = NA
  )) |>
  mutate(Module = str_sub(Activity, 1, 6))


Data_VL <- Data_Edit |>
  group_by(Module, AcademicYear) |>
  summarise(NumFT = sum(Staff_Type == "FT"),
            NumVL = sum(Staff_Type %in% c("Visiting Lecturer","PhD Student"))) |>
  mutate(Staff_Type = case_when(
    (NumFT > 0) & (NumVL == 0) ~ "FT",
    (NumFT == 0) & (NumVL > 0) ~ "VL",
    (NumFT > 0) & (NumVL > 0) ~ "FT + VL"
  )) |>
  ungroup() |>
  drop_na(Staff_Type) |>
  summarize(Num_Module = n_distinct(Module),
            .by = c(AcademicYear, Staff_Type)) |>
  group_by(AcademicYear) |>
  mutate(Num_Module_Total = sum(Num_Module)) |>
  mutate(Perc_Module = Num_Module/Num_Module_Total)
  


## Number of modules
  ggplot(Data_VL) +
  geom_col(aes(x = AcademicYear,
           y = Perc_Module,
           fill = Staff_Type),
           position = "fill") +
  geom_text(aes(x = AcademicYear, 
                y = Perc_Module,
                fill = Staff_Type,
                label = paste0(round(100*Perc_Module),"%")),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#fa6a6d", "#cf060b", "#8a0407")) +
   labs(title = "Modules by Delivery Type",
       x = "Year",
       y = "% Modules",
       fill = "") +
      scale_y_continuous(labels = scales::percent) +
        theme(legend.position = "top") 



```

```{r}
               
 

Data_Edit <- DataTeachingTimetabling |>
  mutate(Staff_Type =
           (case_match)(Staff,
                      FT ~ "FT",
                      PhD ~ "PhD Student",
                      VL ~ "Visiting Lecturer",
                      .default = NA)) |>
  mutate(Staff_Type = case_when(
    Staff == "Giannakopoulos, George" & AcademicYear != "2021/22" ~ "Visiting Lecturer",
    Staff == "Giannakopoulos, George" & AcademicYear != "2022/23" ~ "Visiting Lecturer",
    str_detect(Staff, "VL") ~ "Visiting Lecturer",
    str_detect(Staff, "IP TA") ~ "Visiting Lecturer",
    .default = Staff_Type
  )) |>
  mutate(Level = case_when(
    str_sub(Activity, 3, 3)=="1" ~ "UG1",
    str_sub(Activity, 3, 3)=="2" ~ "UG2",
    str_sub(Activity, 3, 3)=="3" ~ "UG3",
    str_sub(Activity, 3, 3)=="M" ~ "MA"),
    .default = NA)  |>
  drop_na(Level) |>
  mutate(Hours = case_when(
    str_detect(as.character(Duration), "01:00:00") ~ 1,
    str_detect(as.character(Duration), "02:00:00") ~ 2,
    str_detect(as.character(Duration), "03:00:00") ~ 3,
    str_detect(as.character(Duration), "01:30:00") ~ 1.5,
    .default = NA
  )) |>
  mutate(Module = str_sub(Activity, 1, 6))



Data_VL <- Data_Edit |>
  group_by(Module, AcademicYear, Level) |>
  summarise(NumFT = sum(Staff_Type == "FT"),
            NumVL = sum(Staff_Type %in% c("Visiting Lecturer","PhD Student"))) |>
  mutate(Staff_Type = case_when(
    (NumFT > 0) & (NumVL == 0) ~ "FT",
    (NumFT == 0) & (NumVL > 0) ~ "VL",
    (NumFT > 0) & (NumVL > 0) ~ "FT + VL"
  )) |>
  ungroup() |>
  drop_na(Staff_Type) |>
  summarize(Num_Module = n_distinct(Module),
            .by = c(Staff_Type, Level, AcademicYear)) |>
  group_by(Level, Staff_Type) |>
  summarize(Num_Module_Level = sum(Num_Module)) |>
  mutate(Num_Module_Total = sum(Num_Module_Level)) |>
  mutate(Perc_Module = Num_Module_Level/Num_Module_Total) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA" ))) 
  


## Number of modules
ggplot(Data_VL) +
  geom_col(aes(x = Level,
           y = Perc_Module,
           fill = Staff_Type),
           position = "fill") +
  geom_text(aes(x = Level, 
                y = Perc_Module,
                fill = Staff_Type,
                label = paste0(round(100*Perc_Module),"%")),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("#fa6a6d", "#cf060b", "#8a0407")) +
   labs(title = "Modules by Delivery Type",
        subtitle = "Period 2015-2023",
       x = "",
       y = "% Modules",
       fill = "") +
    theme(legend.position = "top") 


```

```{r}

Data_Edit <- DataTeachingTimetabling |>
  mutate(Staff_Type =
           (case_match)(Staff,
                      FT ~ "FT",
                      PhD ~ "PhD Student",
                      VL ~ "Visiting Lecturer",
                      .default = NA)) |>
  mutate(Staff_Type = case_when(
    Staff == "Giannakopoulos, George" & AcademicYear != "2021/22" ~ "Visiting Lecturer",
    Staff == "Giannakopoulos, George" & AcademicYear != "2022/23" ~ "Visiting Lecturer",
    str_detect(Staff, "VL") ~ "Visiting Lecturer",
    str_detect(Staff, "IP TA") ~ "Visiting Lecturer",
    .default = Staff_Type
  )) |>
  mutate(Level = case_when(
    str_sub(Activity, 3, 3)=="1" ~ "UG1",
    str_sub(Activity, 3, 3)=="2" ~ "UG2",
    str_sub(Activity, 3, 3)=="3" ~ "UG3",
    str_sub(Activity, 3, 3)=="M" ~ "MA"),
    .default = NA)  |>
  drop_na(Level) |>
  mutate(Hours = case_when(
    str_detect(as.character(Duration), "01:00:00") ~ 1,
    str_detect(as.character(Duration), "02:00:00") ~ 2,
    str_detect(as.character(Duration), "03:00:00") ~ 3,
    str_detect(as.character(Duration), "01:30:00") ~ 1.5,
    .default = NA
  )) |>
  mutate(Module = str_sub(Activity, 1, 6))



Data_VL <- Data_Edit |>
  group_by(Module, AcademicYear, Level) |>
  summarise(NumFT = sum(Staff_Type == "FT"),
            NumVL = sum(Staff_Type %in% c("Visiting Lecturer","PhD Student"))) |>
  mutate(Staff_Type = case_when(
    (NumFT > 0) & (NumVL == 0) ~ "FT",
    (NumFT == 0) & (NumVL > 0) ~ "VL",
    (NumFT > 0) & (NumVL > 0) ~ "FT + VL"
  )) |>
  ungroup() |>
  drop_na(Staff_Type) |>
  summarize(Num_Module = n_distinct(Module),
            .by = c(AcademicYear, Staff_Type, Level)) |>
  group_by(AcademicYear, Level) |>
  mutate(Num_Module_Total = sum(Num_Module)) |>
  mutate(Perc_Module = Num_Module/Num_Module_Total) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA" ))) 
  


## Number of modules
ggplot(Data_VL) +
  geom_col(aes(x = Level,
           y = Perc_Module,
           fill = Staff_Type),
           position = "fill") +
  geom_text(aes(x = Level, 
                y = Perc_Module,
                fill = Staff_Type,
                label = paste0(round(100*Perc_Module),"%")),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  facet_wrap(~ AcademicYear, ncol = 4) +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("#fa6a6d", "#cf060b", "#8a0407")) +
   labs(title = "Modules by Delivery Type",
       x = "",
       y = "% Modules",
       fill = "") +
    theme(legend.position = "top") 


```


### Module Evaluations

```{r}
  
Data_Edit <- DataModuleEvaluation |>
  rename(Year = Period) |>
  rename(ModuleCode = 'Module Code')|>
  mutate(Year = case_match(
     Year, "21/22 PRD2" ~ "2021/22",
    "21/22 PRD1" ~ "2021/22",
    "22/23 PRD1" ~ "2022/23",
    "20/21 PRD2" ~ "2020/21",
    "20/21 PRD3" ~ "2020/21",
    "20/21 PRD1" ~ "2020/21",
    .default = Year
  )) |>
  mutate(Level = case_when(
    str_sub(ModuleCode, 3, 3)=="1" ~ "UG1",
    str_sub(ModuleCode, 3, 3)=="2" ~ "UG2",
    str_sub(ModuleCode, 3, 3)=="3" ~ "UG3",
    str_sub(ModuleCode, 3, 3)=="M" ~ "MA"),
    .default = NA) |>
  mutate(UGPG = case_when(
    Level=="UG1" ~ "UG",
    Level=="UG2" ~ "UG",
    Level=="UG3" ~ "UG",
    Level=="MA" ~ "MA",
    .default = NA)) |>
  drop_na(Mean)

Data_Edit_Summary = Data_Edit |>
  group_by(Year) |>
  summarise(MedianEval = median(Mean),
         MeanEval = mean(Mean)) 


ggplot(Data_Edit) +
  geom_jitter(aes(x = Year,
                  y = Mean,
                  colour = Year)) +
geom_hline(data = Data_Edit_Summary,
           aes(yintercept = MedianEval,
               col=Year)) +
  geom_label(data = Data_Edit_Summary,
            aes(x = Year,
                y = 1.2,
                label = paste0("Median: ", 
                               round(MedianEval, digits = 1),
                               "\n",
                               "Mean: ",
                               round(MeanEval, digits = 1)
                               )),
                color = "black",
                fontface = "bold",
                label.padding = unit(0.2, "lines"),
            size = 2) +
  facet_grid(~Year, scales="free") +
  ylim(1,5) +
  scale_color_manual(values = c(Custom_Col$Custom_Colour[1],
                                Custom_Col$Custom_Colour[1],
                                Custom_Col$Custom_Colour[2],
                                Custom_Col$Custom_Colour[2],
                                Custom_Col$Custom_Colour[3],
                                Custom_Col$Custom_Colour[3],
                                Custom_Col$Custom_Colour[4],
                                Custom_Col$Custom_Colour[4]
                                )) +
  labs(title = "Module Evaluation across all UG/MA Modules",
       subtitle = "Horizontal line indicate the median module",
       y = "Average Module Score") +
  theme_linedraw() +
  theme(legend.position = "none")
  



```


```{r}
   
Data_Edit <- DataModuleEvaluation |>
  rename(Year = Period) |>
  rename(ModuleCode = 'Module Code')|>
  mutate(Year = case_match(
     Year, "21/22 PRD2" ~ "2021/22",
    "21/22 PRD1" ~ "2021/22",
    "22/23 PRD1" ~ "2022/23",
    "20/21 PRD2" ~ "2020/21",
    "20/21 PRD3" ~ "2020/21",
    "20/21 PRD1" ~ "2020/21",
    .default = Year
  )) |>
  mutate(Level = case_when(
    str_sub(ModuleCode, 3, 3)=="1" ~ "UG1",
    str_sub(ModuleCode, 3, 3)=="2" ~ "UG2",
    str_sub(ModuleCode, 3, 3)=="3" ~ "UG3",
    str_sub(ModuleCode, 3, 3)=="M" ~ "MA"),
    .default = NA) |>
  mutate(Level = fct_relevel(Level, c("UG1", "UG2", "UG3", "MA"))) |>
  mutate(UGPG = case_when(
    Level=="UG1" ~ "UG",
    Level=="UG2" ~ "UG",
    Level=="UG3" ~ "UG",
    Level=="MA" ~ "MA",
    .default = NA)) |>
  drop_na(Mean)

Data_Edit_Summary = Data_Edit |>
  group_by(Level) |>
  summarise(MedianEval = median(Mean),
         MeanEval = mean(Mean)) 


ggplot(Data_Edit) +
  geom_jitter(aes(x = Level,
                  y = Mean,
                  colour = Level)) +
geom_hline(data = Data_Edit_Summary,
           aes(yintercept = MedianEval,
               col=Level)) +
  geom_label(data = Data_Edit_Summary,
            aes(x = Level,
                y = MedianEval,
                label = paste0("Median: ", 
                               round(MedianEval, digits = 1),
                               "\n",
                               "Mean: ",
                               round(MeanEval, digits = 1)
                               ),
                color = Level,
                fontface = "bold"
                ),
            size = 1.6,
            nudge_x = 0.2) +
  facet_grid(~Level, scales="free") +
  ylim(1,5) +
  scale_color_manual(values = c(Custom_Col$Custom_Colour[1:3], "#0f52ba" )) +
  labs(title = "Module Evaluation across Levels",
       subtitle = "Period 2014/22",
       y = "Average Module Score") +
  theme_linedraw() +
  theme(legend.position = "none")
  



```



```{r}

  

DataModuleEvaluation <- read_excel("Data.xlsx", sheet = "Module Evaluation")

Data_Edit <- DataModuleEvaluation |>
  rename(Year = Period) |>
  rename(ModuleCode = 'Module Code')|>
  mutate(Year = case_match(
    Year, "21/22 PRD2" ~ "2021/22",
    "21/22 PRD1" ~ "2021/22",
    "22/23 PRD1" ~ "2022/23",
    "20/21 PRD2" ~ "2020/21",
    "20/21 PRD3" ~ "2020/21",
    "20/21 PRD1" ~ "2020/21",
    .default = Year
  )) |>
  mutate(Level = case_when(
    str_sub(ModuleCode, 3, 3)=="1" ~ "UG1",
    str_sub(ModuleCode, 3, 3)=="2" ~ "UG2",
    str_sub(ModuleCode, 3, 3)=="3" ~ "UG3",
    str_sub(ModuleCode, 3, 3)=="M" ~ "MA"),
    .default = NA) |>
  mutate(Level = fct_relevel(Level, c("UG1", "UG2", "UG3", "MA"))) |>
  mutate(UGPG = case_when(
    Level=="UG1" ~ "UG",
    Level=="UG2" ~ "UG",
    Level=="UG3" ~ "UG",
    Level=="MA" ~ "MA",
    .default = NA)) |>
  drop_na(Mean)

Data_Edit_Summary = Data_Edit |>
  group_by(Year, Level) |>
  summarise(MedianEval = median(Mean),
            MeanEval = mean(Mean)) 


ggplot(Data_Edit_Summary) +
  geom_col(aes(y = MedianEval,
               x = Year,
               fill = Year),
           colour = "lightgrey") +
  geom_text(aes(x = Year,
                y = MedianEval+0.1,
                label = round(MedianEval, digits = 1),
  ),
  size =2.5,
  fontface = "bold",)+
  facet_grid(~Level, scales="free") +
  scale_fill_brewer(palette = "Greens") +
  labs(title = "Module Evaluation across the Years",
       x = "",
       y = "Median Module Score") +
  theme_linedraw() +
  theme(legend.position = "none") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```




#### Module Size and Evaluation

```{r}
   
Data_Edit <- DataModuleEvaluation |>
  rename(Year = Period) |>
  rename(ModuleCode = 'Module Code')|>
  mutate(Year = case_match(
     Year, "21/22 PRD2" ~ "2021",
    "21/22 PRD1" ~ "2021",
    "22/23 PRD1" ~ "2022",
    "20/21 PRD2" ~ "2020",
    "20/21 PRD3" ~ "2020",
    "20/21 PRD1" ~ "2020",
    "2015/16" ~ "2015",
    "2016/17" ~ "2016",
    "2017/18" ~ "2017",
    "2018/19" ~ "2018",
    "2019/20" ~ "2019",
    "2020/21" ~ "2020",
    "2021/22" ~ "2021",
    "2022/23" ~ "2022",
    .default = NA
  ))  |>
  mutate(ModuleCode = str_sub(trimws(ModuleCode), 1, 6)) |>
  select(ModuleCode, Year, Mean, Participants) |>
  mutate(Year = as.numeric(Year)) |>
  mutate(Year_Next = Year + 1) 

Data_Edit_Change <- Data_Edit |>
  left_join(Data_Edit, by = c("Year_Next"="Year", "ModuleCode")) |>
  mutate(Student_Change = Participants.y - Participants.x,
         Score_Change = Mean.y - Mean.x,
         )

ggplot(Data_Edit_Change) +
  geom_point(aes(x=Student_Change,
                 y = Score_Change),
                 color = Custom_Col$Custom_Colour[3]) +
  geom_smooth(aes(x=Student_Change,
                 y = Score_Change),
              method = "lm") +
  labs(title = "Impact of Change in Module Size on Module Evaluation",
       subtitle = "All PG and UG Modules - 2015-2022",
       x = "Change in Number of Students from Previous Year",
       y = "Change in Module Evaluation from Previous Year") +
  theme_light()


  
```


### Assessment


#### Type of Assessment

 
```{r}


library(ggwordcloud)

DataEdit <- DataAssessment |>
  select(Level = "Year of studies the module",
         ModuleCode = `Module Code`,
         Number = "Number of Assessments",
         Percentage = "Percentage of module",
         Type = "Full name of Assessment - This is from SITs and is what will appear on the interim transcript") |>
  filter(Level %in% c("1", "2", "3")) |>
  mutate(Type = trimws(str_replace(Type, "\\s*\\([^\\)]+\\)", ""))) |>
  mutate(Type = case_when(
    word(Type, 1)=="Essay" ~ "Essay",
    word(Type, 1)=="Portfolio" ~ "Portfolio",
    str_detect(Type, "Essay") ~ "Essay",
    str_detect(Type, "presentation") ~ "Presentation",
    str_detect(Type, "Presentation") ~ "Presentation",
    Type == "Dissertation Proposal" ~ "Dissertation Proposal",
    Type == "Dissertation Prospectus" ~ "Dissertation Proposal",
    Type == "Policy brief" ~ "Policy Brief",
    Type == "Policy brief, 3000 words" ~ "Policy Brief",
    Type == "Historian’s Portfolio (approx. 2000 words)" ~ "Portfolio",
    Type == "Historian’s portfolio" ~ "Portfolio",
    Type == "Short Essay" ~ "Essay",
    Type == "Short essay" ~ "Essay",
    Type == "Extended essay" ~ "Essay",
    Type == "Written coursework" ~ "Essay",
    Type == "Series of set exercises comprising e.g. of online assessments, tests and quizzes" ~ "Set Exercises",
    .default = Type
  )) |>
  group_by(Type) |>
  count() |>
  arrange(-n)
  
ggplot(DataEdit) +
    geom_text_wordcloud(aes(label = Type,
                            size = sqrt(n),
                        colour = sqrt(n))) +
    scale_radius(range = c(0, 17), limits = c(0, NA)) +
    #scale_size_area(max_size = 15) +
  theme_minimal() +
  scale_color_gradient(high = "darkred", low = "red")  
                          


```

#### Number of Assessments per Module

```{r}
 

DataEdit <- DataAssessment |>
  select(Level = "Year of studies the module",
         ModuleCode = `Module Code`,
         Number = "Number of Assessments",
         Percentage = "Percentage of module",
         Type = "Full name of Assessment - This is from SITs and is what will appear on the interim transcript") |>
  group_by(Level, ModuleCode) |>
  summarize(Number = max(Number)) |>
  filter(Level %in% c("1", "2", "3")) |>
  group_by(Level) |>
  mutate(TotalModule = n_distinct(ModuleCode)) |>
  group_by(Level,TotalModule, Number) |>
  summarise(NumAssessment = n()) |>
  mutate(PercAssessment = NumAssessment/TotalModule)
  


ggplot(data = DataEdit) +
  geom_col(aes(x=Level,
               y = PercAssessment,
               fill = forcats::fct_rev(as.factor(Number))),
           position = "stack") +
  labs(title = "Number of Summative Assessments per Module (2022-23)",
       y = "Percentage of Modules",
       x = "Level",
       fill = "No. Assessments") +
  geom_text(aes(x = Level, 
                y = PercAssessment,
                label = paste0(round(100*PercAssessment),"%",
                               " ",
                               "(",
                               NumAssessment,
                               ")")),
                size = 2,
              position = position_stack(vjust = 0.5),
            fontface = "bold") +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_brewer(palette= "Reds") +
  theme(legend.position = "bottom")
  
  
  
```

### Academic Misconduct

```{r}

### Academic Misconduct


Data_Edit <- DataIPModuleResults %>%
  select(ModuleCode = 'Module code',
         Year = `Academic Year code...6`,
         Grade = `Formatted agreed mark`,
         Outcome = `Agreed grade`,
         Level = "Level code",
         Student = "Student Candidate Number",
         EntryYear = "Year of entry",
         ActualOutcome = `Actual grade`) |>
  #group_by(Student, ModuleCode, Year) |>
  #mutate(rank = row_number(desc(Attempt))) |>
  mutate(Level = case_match(
    Level,
    "PT" ~ "MA",
    "U1" ~ "UG1",
    "U2" ~ "UG2",
    "U3" ~ "UG3",
    
  )) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA"))) |>
  filter(Level != "MA") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  #summarise(Students_Fail = sum(Result == "F", na.rm = T),
  group_by(Year, Level) |>
  summarise(Students_AM = sum(ActualOutcome== "AM", na.rm = T),
            Total_Students = n_distinct(Student, ModuleCode)) |>
  mutate(Perc_AM = Students_AM/Total_Students) 

ggplot(data = Data_Edit) +
  geom_col(aes(x = Year,
               y = Perc_AM,
               fill = Level),
           show.legend = FALSE) +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c("#fa6a6d", "#cf060b", "#8a0407", "#0f52ba")) +
  facet_wrap(~Level, ncol = 4) +
  labs(title = "Academic Misconduct Cases",
       y = "Percentage of Student/Module") +
  theme_minimal()
  
   
```

## UG Programmes

### UG Applications

#### UG Applications Across All Programmes

```{r}

DataIPApplicationsAndEnrollment |>
  select(Student = "Student code",
         ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
  left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  ggplot() +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = Programme),
           stat = "identity") +
  # geom_text(aes(x = Year, 
  #               y = NumStudent,
  #               fill = Programme,
  #               label = NumStudent),
  #                size = 1.8,
  #            colour = "white",
  #             position = position_stack(vjust = 0.5),
  #            fontface = "bold") +
  geom_text(aes(x = Year, 
                y = NumStudentYear +60,
                label = NumStudentYear),
            size = 2.5) +
  theme_classic() +
  scale_fill_manual(values = Custom_Col$Custom_Colour[1:6]) +
  labs(title = "Student Applications Across UG Programmes",
       x = "Year",
       y = "Students") +
  theme(legend.position = "bottom") +
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
  
```



#### UG Applications by Status (Home/Foreign)

```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student code",
         ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  drop_na(Status) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
    filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Status)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent)) |>
  mutate(PercStudentYear = 100*round(NumStudent/NumStudentYear, digits = 2)) 
  

ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = PercStudentYear,
           fill = Status),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = PercStudentYear,
                fill = Status,
                label = paste0(PercStudentYear,
                               "%")),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  #geom_label(aes(x = Year, 
  #              y = NumStudentYear + NumStudentYear*0.05,
 #               label = NumStudentYear),
 #               size = 2.5,
  #          fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = unique(Custom_Col$Custom_Colour)[1:length(unique(Data_Edit$Status))]) +
   labs(title = "Applications Across UG Programmes",
       x = "Year",
       y = "% Students") +
  theme(legend.position = "top")



```

#### Applications for each UG Programme

```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student code",
         ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level) |>
    left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
    left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme))

 

 

ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
           fill = Programme),
           stat = "identity",
           show.legend = FALSE) +
 # geom_text(aes(x = Year, 
 #               y = NumStudent,
 #               fill = Programme,
 #               label = NumStudent),
 #               size = 2,
 #           colour = "white",
 #            position = position_stack(vjust = 0.5),
 #           fontface = "bold") +
  geom_text(aes(x = Year, 
                y = NumStudent + 20,
                label = NumStudent),
                size = 1.8) +
  theme_classic() +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
   labs(title = "Student Applications Across UG Programmes",
       x = "Year",
       y = "Students") +
  facet_wrap(~Programme) +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 90))


 
 


```

```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student code",
         ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  drop_na(Status) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
    filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Status, Programme)) |>
  group_by(Year, Programme) |>
  mutate(NumStudentYear = sum(NumStudent)) |>
  mutate(PercStudentYear = 100*round(NumStudent/NumStudentYear, digits = 2)) 
  

ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = PercStudentYear,
           fill = Status),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = PercStudentYear,
                fill = Status,
                label = paste0(PercStudentYear,
                               "%")),
                size = 1.5,
            colour = "white",
             position = position_stack(vjust = 0.5)
            #fontface = "bold"
            ) +
  #geom_label(aes(x = Year, 
  #              y = NumStudentYear + NumStudentYear*0.05,
 #               label = NumStudentYear),
 #               size = 2.5,
  #          fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = unique(Custom_Col$Custom_Colour)[1:length(unique(Data_Edit$Status))]) +
   labs(title = "Applications Across UG Programmes",
       x = "Year",
       y = "% Students") +
  facet_wrap(~Programme) +
  theme(legend.position = "top") +
   theme(axis.text.x = element_text(size = 5, 
                                   angle = 90))





 
 
```


#### UG Applications by A Levels

```{r}



Data_Edit <- DataApplicationsOffersByTariffs |>
  unique() |>
  select(Programme, 
         Year = `Year (int)`,
         Student = `D4 - Student Chracteristic toggle`,
         Applications = `Unique City course apps`,
         Offer = `Unique City course apps (Offer) (Rounded)`,
         Firm = `Unique City course apps (Firm) (Rounded)`) |>
  filter(Student != "Age <18 or >18 (UK applicant)") |>
  filter(Student != "No A levels predicted") |>
  filter(Student != "OS applicant") |>
  filter(Programme == "IntPol All") |>
  pivot_longer(cols = c("Applications", "Offer", "Firm"),
    names_to = "Type",
               values_to = "Number") |>
  #filter(Type != "Offer") |>
  mutate(Number = replace_na(Number, 0)) |>
  group_by(Year, Programme, Type) |>
  mutate(Total = sum(Number)) |>
  mutate(Perc = Number/Total) |>
  mutate(Perc_Label = case_when(
    Perc > 0.03 ~ paste0(round(Perc, digits = 2)*100,"%"),
    .default = NA))
 

  
Data_Edit |>
  filter(Programme == "IntPol All") |>
  ggplot() +
  geom_bar(aes(fill = Student,
               y = Perc,
               x = Year),
           stat = "identity") +
#  geom_text(aes(x = Year, 
#                y = Perc,
#                fill = Student,
#                label = Perc_Label
#                ),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5)
 #           #fontface = "bold"
#  ) +
  facet_wrap(~Type) +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent) +
  #  scale_x_discrete(limits = rev) +
  theme_light() +
  labs(title = "Predicted A Levels of UK Applicants",
       subtitle = "All UG Programmes of the IP Department",
       x = "",
       y = "",
       fill = "") +
  # coord_flip() +
  theme(legend.position="bottom")+
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
   
```

```{r}

Data_Edit <- DataApplicationsOffersByTariffs |>
  unique() |>
  select(Programme, 
         Year = `Year (int)`,
         Student = `D4 - Student Chracteristic toggle`,
         Applications = `Unique City course apps`,
         Offer = `Unique City course apps (Offer) (Rounded)`,
         Firm = `Unique City course apps (Firm) (Rounded)`) |>
  filter(Student != "Age <18 or >18 (UK applicant)") |>
  filter(Student != "No A levels predicted") |>
  filter(Student != "OS applicant") |>
  #filter(Programme != "IntPol All") |>
  pivot_longer(cols = c("Applications", "Offer", "Firm"),
    names_to = "Type",
               values_to = "Number") |>
  filter(Type == "Applications") |>
  group_by(Year) |>
  complete(Programme, Type, Student) |>
  mutate(Number = replace_na(Number, 0)) |>
  group_by(Year, Programme, Type) |>
  mutate(Total = sum(Number)) |>
  mutate(Perc = Number/Total) |>
  mutate(Perc_Label = case_when(
    Perc > 0.03 ~ paste0(round(Perc, digits = 2)*100,"%"),
    .default = NA))
 
  
Data_Edit |>
  filter(Programme != "IntPol All") |>
  ggplot() +
  geom_bar(aes(fill = Student,
               y = Perc,
               x = Year),
           stat = "identity") +
#  geom_text(aes(x = Year, 
#                y = Perc,
#                fill = Student,
#                label = Perc_Label
#                ),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5)
 #           #fontface = "bold"
#  ) +
  facet_wrap(~ Programme) +
  scale_y_continuous(labels = scales::percent) +
  #  scale_x_discrete(limits = rev) +
  theme_light() +
  labs(title = "Predicted A Levels of All UK Applicants",
       subtitle = "All UG Programmes of the IP Department",
       x = "",
       y = "",
       fill = "") +
  scale_fill_brewer(palette = "Reds") +
  # coord_flip() +
  theme(legend.position="bottom")+
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
   
```

```{r}


Data_Edit <- DataApplicationsOffersByTariffs |>
  unique() |>
  select(Programme, 
         Year = `Year (int)`,
         Student = `D4 - Student Chracteristic toggle`,
         Applications = `Unique City course apps`,
         Offer = `Unique City course apps (Offer) (Rounded)`,
         Firm = `Unique City course apps (Firm) (Rounded)`) |>
  filter(Student != "Age <18 or >18 (UK applicant)") |>
  filter(Student != "No A levels predicted") |>
  filter(Student != "OS applicant") |>
  #filter(Programme != "IntPol All") |>
  pivot_longer(cols = c("Applications", "Offer", "Firm"),
    names_to = "Type",
               values_to = "Number") |>
  filter(Type == "Firm") |>
  group_by(Year) |>
  complete(Programme, Type, Student) |>
  mutate(Number = replace_na(Number, 0)) |>
  group_by(Year, Programme, Type) |>
  mutate(Total = sum(Number)) |>
  mutate(Perc = Number/Total) |>
  mutate(Perc_Label = case_when(
    Perc > 0.03 ~ paste0(round(Perc, digits = 2)*100,"%"),
    .default = NA))
 
  
Data_Edit |>
  filter(Programme != "IntPol All") |>
  ggplot() +
  geom_bar(aes(fill = Student,
               y = Perc,
               x = Year),
           stat = "identity") +
#  geom_text(aes(x = Year, 
#                y = Perc,
#                fill = Student,
#                label = Perc_Label
#                ),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5)
 #           #fontface = "bold"
#  ) +
  facet_wrap(~ Programme) +
  scale_y_continuous(labels = scales::percent) +
  #  scale_x_discrete(limits = rev) +
  theme_light() +
  labs(title = "Predicted A Levels of Firm UK Applicants",
       subtitle = "All UG Programmes of the IP Department",
       x = "",
       y = "",
       fill = "") +
  scale_fill_brewer(palette = "Reds") +
  # coord_flip() +
  theme(legend.position="bottom")+
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
```


```{r}


Data_Edit <- DataApplicationsOffersByTariffs |>
  unique() |>
  select(Programme, 
         Year = `Year (int)`,
         Student = `D4 - Student Chracteristic toggle`,
         Applications = `Unique City course apps`,
         Offer = `Unique City course apps (Offer) (Rounded)`,
         Firm = `Unique City course apps (Firm) (Rounded)`) |>
  filter(Student != "Age <18 or >18 (UK applicant)") |>
  filter(Student != "No A levels predicted") |>
  filter(Student != "OS applicant") |>
  #filter(Programme != "IntPol All") |>
  pivot_longer(cols = c("Applications", "Offer", "Firm"),
    names_to = "Type",
               values_to = "Number") |>
  filter(Type == "Offer") |>
  group_by(Year) |>
  complete(Programme, Type, Student) |>
  mutate(Number = replace_na(Number, 0)) |>
  group_by(Year, Programme, Type) |>
  mutate(Total = sum(Number)) |>
  mutate(Perc = Number/Total) |>
  mutate(Perc_Label = case_when(
    Perc > 0.03 ~ paste0(round(Perc, digits = 2)*100,"%"),
    .default = NA))
 
  
Data_Edit |>
  filter(Programme != "IntPol All") |>
  ggplot() +
  geom_bar(aes(fill = Student,
               y = Perc,
               x = Year),
           stat = "identity") +
#  geom_text(aes(x = Year, 
#                y = Perc,
#                fill = Student,
#                label = Perc_Label
#                ),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5)
 #           #fontface = "bold"
#  ) +
  facet_wrap(~ Programme) +
  scale_y_continuous(labels = scales::percent) +
  #  scale_x_discrete(limits = rev) +
  theme_light() +
  labs(title = "Predicted A Levels of UK Offer-Holders",
       subtitle = "All UG Programmes of the IP Department",
       x = "",
       y = "",
       fill = "") +
  scale_fill_brewer(palette = "Reds") +
  # coord_flip() +
  theme(legend.position="bottom")+
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
```


### UG Enrollment

#### UG Total Enrollment

```{r}


Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
  left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme))



ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = Programme),
           stat = "identity") +
#  geom_text(aes(x = Year, 
#                y = NumStudent,
#                fill = Programme,
#                label = NumStudent),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5),
#            fontface = "bold") +
  geom_text(aes(x = Year, 
                 y = NumStudentYear + 7,
                 label = NumStudentYear),
             size = 2.9,
             fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  labs(title = "Enrollment of New Across UG Programmes",
       x = "Year",
       y = "Students") +
  theme(legend.position = "bottom") +
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
 
     
```


```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
  left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme))



ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = Programme),
           stat = "identity",
           show.legend = FALSE) +
#  geom_text(aes(x = Year, 
#                y = NumStudent,
#                fill = Programme,
#                label = NumStudent),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5),
#            fontface = "bold") +
  geom_text(aes(x = Year, 
                 y = NumStudent + 4,
                 label = NumStudent),
             size = 1.8,
             fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  labs(title = "Student Enrollment Across UG Programmes",
       x = "Year",
       y = "Students") +
  theme(legend.position = "top") +
  facet_wrap(~Programme) +
  guides(fill=guide_legend(nrow=2, byrow=TRUE)) +
    theme(axis.text.x = element_text(size = 5))
```

#### Qualifications on Entry

```{r}

Data <- read_excel("Data.xlsx", sheet = "UG Qualification on Entry") |>
  rename("Qualification" = `APE QUAL LOOKUP`) |>
  rename("Year" = `Academic Year code`)

Data |>
  group_by(Qualification) |>
  summarise(Num_Students = n()) %>%
  mutate(Perc_Students = Num_Students/sum(Num_Students)) |>
  ggplot() +
  geom_col(aes(x = fct_reorder(Qualification, Perc_Students),
           y = Perc_Students,
           fill = Qualification),
           show.legend = FALSE) +
  geom_text(aes(x = fct_reorder(Qualification, Perc_Students),
           y = Perc_Students+0.04,
           label = paste0(round(Perc_Students*100, digits = 1),
                          "%")),
           size= 2)+
  coord_flip() +
 scale_y_continuous(labels = scales::percent) +
  labs(title = "Entry Level Qualifications",
       subtitle = "All UG Programmese - 2018-21",
       x = "",
       y = "% of all Y1 students") +
  theme_classic()  

 
```


#### Tariffs


```{r tariffs_all}



Data_Edit <- DataTariffs |>
  select(Programme, Year, ClearingStudents, NonClearing_Students, Avg_Clearing_Tariff, Avg_NonClearing_Tariff) |>
  mutate(Avg_Tariff = ((ClearingStudents*Avg_Clearing_Tariff) + (NonClearing_Students*Avg_NonClearing_Tariff))/(ClearingStudents+NonClearing_Students)) |>  
  mutate(Total_Students = ClearingStudents+NonClearing_Students) |>
  select(Programme, Year,Total_Students,Avg_Tariff) |>
  mutate(WeightedTariff = Total_Students*Avg_Tariff) |>
  group_by(Year) |>
  summarise(Sum_Tariff = sum(WeightedTariff),
            Sum_Students = sum(Total_Students)) |>
  mutate(Avg_Tariff = Sum_Tariff/Sum_Students)
 


  


ggplot(Data_Edit,) +
  geom_col(aes(x=Year,
               y = Avg_Tariff),
           fill = "#ad0509") +
  geom_text(aes(x=Year,
               y = Avg_Tariff + 5,
               label = round(Avg_Tariff, digits = 1)),
            size = 3) +
 # scale_y_continuous(labels = scales::percent) +
  theme_classic() +
   labs(title = "Average Tariffs across all UG Programmes",
       x = "Year",
       y = "Average Tariff")  
```

```{r tariff_by_programme}

Data_Edit <- DataTariffs |>
  left_join(Programme_Name, by = c("Programme" = "Programme_Old")) |>
 select(Programme = Programme.y, Year, ClearingStudents, NonClearing_Students, Avg_Clearing_Tariff, Avg_NonClearing_Tariff) |>
  mutate(Avg_Tariff = ((ClearingStudents*Avg_Clearing_Tariff) + (NonClearing_Students*Avg_NonClearing_Tariff))/(ClearingStudents+NonClearing_Students)) |>  
  left_join(Custom_Col, by = join_by(Programme == Label)) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) 

Data_Edit_Summary = Data_Edit |>
  group_by(Programme) |>
  summarize(Avg_Tariff = mean(Avg_Tariff))



ggplot(Data_Edit,) +
  geom_col(aes(x=Year,
               y = Avg_Tariff,
               fill= Programme),
           show.legend = FALSE) +
  facet_wrap(~Programme) +
  geom_text(aes(x=Year,
                y = Avg_Tariff + 5,
                label = round(Avg_Tariff, digits = 1)),
            size = 2.2) +
  geom_label(data = Data_Edit_Summary,
             aes(x = "2020/1", 
                 y = 20,
                 fill = Programme,
                 label = paste0("Average Tariff: ", round(Avg_Tariff, digits=1))),
             size = 2.5,
             fill = "white",
             nudge_x = -0.4,
             #            position = position_stack(vjust = 0.5),
             fontface = "bold",
             label.padding = unit(0.2, "lines"),
             show.legend = FALSE) +
  # scale_y_continuous(labels = scales::percent) +
  theme_classic() +
  labs(title = "UG Programmes - Tariffs",
       x = "Year",
       y = "Average Tariff") +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) 
```


#### Clearing

```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`,
         Clearing = `Clearing ?`,
         ClearingResponse = `Clearing Response`,
         ClearingDecision = `Clearing Decision`,
         Outcome = `Reason for transfer`,
         Enrolled) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  mutate(Clearing = case_match(
    Clearing, 
    "N" ~ "Not Clearing",
    .default = "Clearing"
  )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Clearing)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent)) |>
  mutate(PercStudentYear = 100*round(NumStudent/NumStudentYear, digits = 2)) 


ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = PercStudentYear,
               fill = Clearing),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = PercStudentYear,
                fill = Clearing,
                label = paste0(PercStudentYear,
                               "%",
                               "\n",
                               "(", NumStudent, ")")),
            size = 3,
            colour = "white",
            position = position_stack(vjust = 0.5)
            #fontface = "bold"
  ) +
  #geom_label(aes(x = Year, 
  #              y = NumStudentYear + NumStudentYear*0.05,
  #               label = NumStudentYear),
  #               size = 2.5,
  #          fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c(Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3])) +
  labs(title = "Enrollment of New Students via Clearing",
       subtitle = "All UG Programmes",
       fill = "",
         x = "",
       y = "") +
  #facet_wrap(~Programme) +
  theme(legend.position = "top") +
  theme(axis.text.x = element_text(size = 10))
  

  
```

```{r}



Data_Edit <- DataTariffs |>
  select(Programme, Year, ClearingStudents, NonClearing_Students, Avg_Clearing_Tariff, Avg_NonClearing_Tariff) |>
  group_by(Year) |>
  summarize(Avg_Tariff_Clearing = sum(ClearingStudents*Avg_Clearing_Tariff)/sum(ClearingStudents),
            Avg_Tariff_NonClearing = sum(NonClearing_Students*Avg_NonClearing_Tariff)/sum(NonClearing_Students)) |>
  pivot_longer(cols = c(Avg_Tariff_Clearing, Avg_Tariff_NonClearing),
               names_to = "Clearing",
               values_to = "Tariff"
               ) |>
  mutate(Clearing = case_match(
    Clearing,
    "Avg_Tariff_Clearing" ~ "Clearing",
    "Avg_Tariff_NonClearing" ~ "Non-Clearing"
  )) |>
    mutate(Clearing = factor(Clearing, c("Non-Clearing", "Clearing"))) |>
  arrange(factor(Clearing))
 
 

ggplot(Data_Edit) +
  geom_col(aes(x=Year,
               y = Tariff,
               fill = Clearing),
           position = "dodge") +
  geom_text(aes(x=Year,
               y = Tariff + 5,
               fill = Clearing,
               label = round(Tariff, digits = 1)),
             position = position_dodge(width = .9),
            size = 3) +
 # scale_y_continuous(labels = scales::percent) +
  theme_classic() +
   labs(title = "Average Tariffs Across Clearing and Non-Clearing Students",
        subtitle = "All UG Programmes - IP Department",
       x = "Year",
       y = "Average Tariff",
       fill = "Entry Type")  +
    scale_fill_manual(values = c(Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3])) +
    theme(legend.position = "top") 
```


```{r}


Data_Edit <- DataTariffs |>
  select(Programme, Year, Avg_Clearing_Tariff, Avg_NonClearing_Tariff) |>
  pivot_longer(cols = c(Avg_Clearing_Tariff, Avg_NonClearing_Tariff),
               names_to = "Clearing",
               values_to = "Tariff"
               ) |>
  mutate(Clearing = case_match(
    Clearing,
    "Avg_Clearing_Tariff" ~ "Clearing",
    "Avg_NonClearing_Tariff" ~ "Non-Clearing"
  )) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
    mutate(Clearing = factor(Clearing, c("Non-Clearing", "Clearing"))) |>
  arrange(factor(Clearing))
 
 

ggplot(Data_Edit,) +
  geom_col(aes(x=Year,
               y = Tariff,
               fill = Clearing),
           position = "dodge") +
  geom_text(aes(x=Year,
               y = Tariff + 7,
               fill = Clearing,
               label = round(Tariff, digits = 1)),
             position = position_dodge(width = .9),
            size = 1.7) +
  facet_wrap(~Programme) +
 # scale_y_continuous(labels = scales::percent) +
  theme_classic() +
   labs(title = "Average Tariffs Across Clearing and Non-Clearing Students",
        subtitle = "All UG Programmes - IP Department",
       x = "Year",
       y = "Average Tariff",
       fill = "Entry Type")  +
   scale_fill_manual(values = c(Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3])) +
    theme(legend.position = "top") 
```



### UG Progression

#### Progression Y1 to Y2

```{r}


Data_Edit <- DataIPProgressionRecords %>%
  left_join(Programme_Name, by = join_by(`Route Name` == Programme_Old)) |>
  select(Student = `SPR Code`,
         Programme,
         Year = `Academic Year code`,
         Block = `Course Block code`,
         Outcome = "Progression Agreed",
         Level = `Level code`,
         Sequence = `Sequence number`
  )  |>
  mutate(Level = case_when(
    Block == "11" &  Level %in% c("U1", "U2") ~ "U1",
    Block == "21" ~ "U2",
    Block == "2D" ~ NA,
    .default = Level)) |>
  filter(Level == "U1") %>%
  drop_na(Level) |>
  # filter (Block == "11") |>
  mutate(Progression = case_when(
    Outcome %in% c("Course Completed", "Trailing Progression", "Pass Progress", "Progress (Pending Confirmation)") ~ "Progressed",
    Outcome %in% c("Complete Repeat of Current Part", "Fail Resit", "Fail Exit Award", "Fail Withdraw", "Partial Repeat With Attendance",
                   "Resit Without Attendance") ~ "Not Progressed",
    .default = NA
  )) |>
  drop_na(Outcome) |>
  # filter(Programme == "BSc International Politics") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3")) |>
  #  filter(Year != "2018/9") |>
  filter(Year != "2022/3") |>
  group_by(Student, Year) |>
  mutate(rank = row_number(desc(Sequence))) |>
  filter(rank == 1) |>
  ungroup() |>
  group_by(Year) |>
  summarize(N_Progressed = sum(Progression == "Progressed", na.rm=T),
            N_NonProgressed = sum(Progression == "Not Progressed", na.rm=T),
            N_Total = n()) |>
  mutate(Perc_Progressed = round(N_Progressed/N_Total, digits = 2)) |>
  drop_na(Year)  



ggplot(Data_Edit) +
  geom_col(aes(x = Year, 
               y = Perc_Progressed),
           fill = "#ad0509") +
  geom_richtext(aes(x = Year, 
                    y = Perc_Progressed,
                    label = paste0("**",
                                   100*round(Perc_Progressed, digits = 2),
                                   "%",
                                   "**", 
                                   "<br>", 
                                   "(", 
                                   N_Progressed, 
                                   "/", 
                                   N_Total," )" 
                    )),
                size = 3,
                nudge_y = 0.03,
                fill = NA,
                label.color = NA,
                #fontface = "bold",
                lineheight = 1) +
  labs(title = "Progression from Y1 to Y2 - All UG Programmes",
       x = "Year",
       y = "Progression Rate",
       caption = "In 2019/0 all students were progressed because of the \naccomodations related to the COVID-19 pandemic") +
  theme_classic() +
  #   scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  #scale_y_continuous(labels = scales::percent) +
  ylim(0, max(1, max(Data_Edit$Perc_Progressed)+0.15)) +
  scale_y_continuous(labels = scales::percent)

```

```{r}
Data_Edit <- DataIPProgressionRecords %>%
    left_join(Programme_Name, by = join_by(`Route code` == Programme_Old)) |>
    select(Student = `SPR Code`,
           `Route code`,
           `Course Name`,
           Programme,
           Year = `Academic Year code`,
           Block = `Course Block code`,
           Outcome = "Progression Agreed",
           Level = `Level code`,
           Sequence = `Sequence number`
    )  |>
    mutate(Level = case_when(
    Block == "11" &  Level %in% c("U1", "U2") ~ "U1",
    Block == "21" ~ "U2",
    Block == "2D" ~ NA,
    .default = Level)) |>
  filter(Level == "U1") %>%
  drop_na(Level) |>
    mutate(Progression = case_when(
      Outcome %in% c("Course Completed", "Trailing Progression", "Pass Progress", "Progress (Pending Confirmation)") ~ "Progressed",
      Outcome %in% c("Complete Repeat of Current Part", "Fail Resit", "Fail Exit Award", "Fail Withdraw", "Partial Repeat With Attendance",
                     "Resit Without Attendance") ~ "Not Progressed",
      .default = NA
    )) |>
    drop_na(Outcome) |>
  # filter(Programme == "BSc International Politics") |>
    filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                       "2018/9", "2019/0", "2020/1", "2021/2",
                       "2022/3")) |>
  #  filter(Year == "2018/9") |>
    group_by(Student, Year) |>
    mutate(rank = row_number(desc(Sequence))) |>
    filter(rank == 1) |>
    ungroup() |>
    group_by(Year, Programme) |>
    summarize(N_Progressed = sum(Progression == "Progressed"),
              N_NonProgressed = sum(Progression == "Not Progressed"),
              N_Total = n()) |>
    mutate(Perc_Progressed = round(N_Progressed/N_Total, digits = 2)) |>
    drop_na(Year) |>
    left_join(Custom_Col, by = join_by(Programme == Label)) |>
    mutate(Programme = factor(Programme, Order_UG)) %>%
    arrange(factor(Programme))
    
  
  
    
ggplot(Data_Edit) +
  geom_col(aes(x = Year, 
               y = Perc_Progressed,
               fill = Programme),
           show.legend = FALSE) +
  geom_richtext(aes(x = Year, 
                    y = Perc_Progressed,
                    label = paste0("**",
                                   100*round(Perc_Progressed, digits = 2),
                                   "%",
                                   "**", 
                                   "<br>", 
                                   "(", 
                                   N_Progressed, 
                                   "/", 
                                   N_Total," )" 
                    )),
                size = 2.4,
                nudge_y = 0.05,
                fill = NA,
                label.color = NA,
                #fontface = "bold",
                lineheight = 1) +
  facet_wrap(~Programme) +
  labs(title = "Progression from Y1 to Y2 - All UG Programmes",
       x = "Year",
       y = "Progression Rate",
       caption = "In 2019/0 all students were progressed because of the \naccomodations related to the COVID-19 pandemic") +
  theme_classic() +
  scale_fill_manual(values = Custom_Col$Custom_Colour[1:6]) +
  #   scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  #scale_y_continuous(labels = scales::percent) +
  ylim(0, max(1, max(Data_Edit$Perc_Progressed)+0.15)) +
  scale_y_continuous(labels = scales::percent)

```

#### Progression Y2 to Y3

```{r}

  Data_Edit <- DataIPProgressionRecords %>%
    left_join(Programme_Name, by = join_by(`Route code` == Programme_Old)) |>
    select(Student = `SPR Code`,
           `Route code`,
           `Course Name`,
           Programme,
           Year = `Academic Year code`,
           Block = `Course Block code`,
           Outcome = "Progression Agreed",
           Level = `Level code`,
           Sequence = `Sequence number`
    )  |>
    #filter(Programme == "BA History and Politics")
    filter(Block == "21") %>%
    filter(!(Programme == "BSc International Political Economy" & Year == "2014/5")) |>
    mutate(Progression = case_when(
      Outcome %in% c("Course Completed", "Trailing Progression", "Pass Progress", "Progress (Pending Confirmation)") ~ "Progressed",
      Outcome %in% c("Complete Repeat of Current Part", "Fail Resit", "Fail Exit Award", "Fail Withdraw", "Partial Repeat With Attendance",
                     "Resit Without Attendance") ~ "Not Progressed",
      .default = NA
    )) |>
    drop_na(Progression) |>
    filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                       "2018/9", "2019/0", "2020/1", "2021/2",
                       "2022/3")) |>
    #filter(Year == "2020/1") |>
    group_by(Student, Year) |>
    mutate(rank = row_number(desc(Sequence))) |>
    filter(rank == 1) |>
    ungroup() |>
    group_by(Year) |>
    summarize(N_Progressed = sum(Progression == "Progressed"),
              N_NonProgressed = sum(Progression == "Not Progressed"),
              N_Total = n()) |>
    mutate(Perc_Progressed = round(N_Progressed/N_Total, digits = 2)) |>
    drop_na(Year)  
    
  
  
    
ggplot(Data_Edit) +
  geom_col(aes(x = Year, 
               y = Perc_Progressed),
               fill = "#ad0509") +
             geom_richtext(aes(x = Year, 
                               y = Perc_Progressed,
                               label = paste0("**",
                                              100*round(Perc_Progressed, digits = 2),
                                              "%",
                                              "**", 
                                              "<br>", 
                                              "(", 
                                              N_Progressed, 
                                              "/", 
                                              N_Total," )" 
                               )),
                           size = 3,
                           nudge_y = 0.04,
                           fill = NA,
                           label.color = NA,
                           #fontface = "bold",
                           lineheight = 1) +
  labs(title = "Progression from Y2 to Y3 - All UG Programmes",
       x = "Year",
       y = "Progression Rate",
       caption = "In 2019/0 all students were progressed because of the accomodations related to the COVID-19 pandemic") +
  theme_classic() +
  scale_fill_manual(values = Custom_Col$Custom_Colour[1:6]) +
  #   scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  #scale_y_continuous(labels = scales::percent) +
  ylim(0, max(1, max(Data_Edit$Perc_Progressed)+0.15)) +
  scale_y_continuous(labels = scales::percent)
```

```{r}

  Data_Edit <- DataIPProgressionRecords %>%
    left_join(Programme_Name, by = join_by(`Route code` == Programme_Old)) |>
    select(Student = `SPR Code`,
           `Route code`,
           `Course Name`,
           Programme,
           Year = `Academic Year code`,
           Block = `Course Block code`,
           Outcome = "Progression Agreed",
           Level = `Level code`,
           Sequence = `Sequence number`
    )  |>
   # filter(Programme == "BA History and Politics") 
    #filter(Level == "U2") %>%
    filter(Block == 21) %>%
    filter(!(Programme == "BSc International Political Economy" & Year == "2014/5")) |>
    mutate(Progression = case_when(
      Outcome %in% c("Course Completed", "Trailing Progression", "Pass Progress", "Progress (Pending Confirmation)") ~ "Progressed",
      Outcome %in% c("Complete Repeat of Current Part", "Fail Resit", "Fail Exit Award", "Fail Withdraw", "Partial Repeat With Attendance",
                     "Resit Without Attendance") ~ "Not Progressed",
      .default = NA
    )) |>
    drop_na(Progression) |>
    filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                       "2018/9", "2019/0", "2020/1", "2021/2",
                       "2022/3")) |>
    #filter(Year == "2020/1") |>
    group_by(Student, Year) |>
    mutate(rank = row_number(desc(Sequence))) |>
    filter(rank == 1) |>
    ungroup() |>
    group_by(Year, Programme) |>
    summarize(N_Progressed = sum(Progression == "Progressed"),
              N_NonProgressed = sum(Progression == "Not Progressed"),
              N_Total = n()) |>
    mutate(Perc_Progressed = round(N_Progressed/N_Total, digits = 2)) |>
    drop_na(Year) |>
    left_join(Custom_Col, by = join_by(Programme == Label)) |>
    mutate(Programme = factor(Programme, Order_UG)) %>%
    arrange(factor(Programme))
    
  
  
    
ggplot(Data_Edit) +
  geom_col(aes(x = Year, 
               y = Perc_Progressed,
               fill = Programme),
           show.legend = FALSE) +
  geom_richtext(aes(x = Year, 
                    y = Perc_Progressed,
                    label = paste0("**",
                                   100*round(Perc_Progressed, digits = 2),
                                   "%",
                                   "**", 
                                   "<br>", 
                                   "(", 
                                   N_Progressed, 
                                   "/", 
                                   N_Total," )" 
                    )),
                size = 2.4,
                nudge_y = 0.05,
                fill = NA,
                label.color = NA,
                #fontface = "bold",
                lineheight = 1) +
  facet_wrap(~Programme) +
  labs(title = "Progression from Y2 to Y3 by UG Programme",
       x = "Year",
       y = "Progression Rate",
       caption = "In 2019/0 all students were progressed because of the accomodations related to the COVID-19 pandemic") +
  theme_classic() +
  scale_fill_manual(values = Custom_Col$Custom_Colour[1:6]) +
  #   scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  #scale_y_continuous(labels = scales::percent) +
  ylim(0, max(1, max(Data_Edit$Perc_Progressed)+0.15)) +
  scale_y_continuous(labels = scales::percent)

```

#### Reasons for Withdrawals
```{r}
 
Data <- read_excel("Data.xlsx", sheet = "Reasons for Withdrawal") |>
  drop_na(Cause)

Data_Edit <- Data %>%
  mutate(across(c(Y1, Y2, Y3), as.numeric)) %>%
  mutate(across(c(Y1, Y2, Y3), ~coalesce(.x, 0))) %>%
  pivot_longer(cols = c(Y1, Y2, Y3), 
               names_to = "Level",
               values_to = "Count")  %>%
  group_by(Cause) %>%
  mutate(Total = sum(Count))

ggplot(Data_Edit) +
  geom_col(aes(x = fct_reorder(Cause, Total),
               y = Count,
               fill = Level),
           position = position_stack(reverse = TRUE)) +
  coord_flip() +
  geom_label(aes(x = fct_reorder(Cause, Total),
               y = - 3,
               label = Total
               ),
             size = 3)  +
  labs(title = "Most Common Reasons for Student Withdrawal",
       subtitle = "All UG Programmes - 2018-2022",
       x = "",
       y = "") + 
    theme_classic() +
  theme(legend.position = "top") +
  scale_fill_manual(values = c(Custom_Col$Custom_Colour[2],
                               Custom_Col$Custom_Colour[4],
                               Custom_Col$Custom_Colour[6]))
  
```

#### Progression by Module

```{r}

Data_Edit <- DataIPModuleResults %>%
  select(ModuleCode = 'Module code',
         Year = `Academic Year code...6`,
         Result = `Result of Module`,
         Grade = `Formatted agreed mark`,
         Outcome = `Agreed grade`,
         Level = "Level code",
         Student = "Student Candidate Number",
         EntryYear = "Year of entry",
         ActualOutcome = `Actual grade`,
         Outcome = `Agreed grade`,
         Attempt = "Current Attempt") |>
  #group_by(Student, ModuleCode, Year) |>
  #mutate(rank = row_number(desc(Attempt))) |>
  mutate(Level = case_match(
    Level,
    "PT" ~ "MA",
    "U1" ~ "UG1",
    "U2" ~ "UG2",
    "U3" ~ "UG3",
    
  )) |>
  mutate(Level = case_match(
    ModuleCode,
    "HI2006" ~ "UG2",
    .default = Level
  )) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA"))) |>
  mutate(PassMark = case_when(
    (Grade<40 & Level %in% c("UG1", "UG2", "UG3")) ~ "Fail",
    Grade<50 & Level == "MA" ~ "Fail",
    .default = "Pass"
  )) |>
  filter(Level != "MA") |>
  filter(Year %in% c("2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  #summarise(Students_Fail = sum(Result == "F", na.rm = T),
  group_by(Year, Level, ModuleCode) |>
  summarise(Students_PassMarkFail = sum(PassMark== "Fail", na.rm = T),
            Students_Tried_FA = sum(Outcome== "FA", na.rm = T),
            Students_Withdrawn = sum(Outcome== "WD", na.rm = T),
            Students_Fail_Binary = sum(Result== "F", na.rm = T),
            Students_Compensated = sum(Outcome== "CO", na.rm = T),
            Students_AM = sum(ActualOutcome== "AM", na.rm = T),
            Total_Students = n_distinct(Student)) |>
  mutate(Perc_PassMarkFail = Students_PassMarkFail/Total_Students) |>
  mutate(Perc_PassMarkFail = case_when(
    Year == "2019/0" & Perc_PassMarkFail>0.5 ~ 0,
    .default = Perc_PassMarkFail
  )) |>
  mutate(Perc_Tried_FA = Students_Tried_FA/Total_Students) |>
  mutate(Perc_Fail_Binary = Students_Fail_Binary/Total_Students) |>
  mutate(Perc_Withdrawn = Students_Withdrawn/Total_Students) |>
  mutate(Perc_Compensated = Students_Compensated/Total_Students) |>
  mutate(Perc_Compensated = Students_AM/Total_Students)  



library(hrbrthemes)

ggplot(Data_Edit) +
  geom_tile(aes(x = Year,
             y = ModuleCode,
             #label = 100*round(Perc_Fail, digits = 2),
             fill = Perc_Fail_Binary),
            color = "lightgrey") +
  scale_fill_gradient(low="lightyellow", 
                      high="red", 
                      labels = scales::label_percent(accuracy = 1L),
                      limits = c(0, max(Data_Edit$Perc_Fail_Binary))) +
  facet_wrap(~Level, ncol = 3, scales = "free") +
  #  facet_grid(rows = vars(Level), scales = "free") +
  theme(axis.text.y = element_text(size = 5)) +
  labs(title = "Fail Marks (including Withdrawals) Across Modules",
       x = "",
       y = "Module",
     fill = "",
      caption = "The figure includes cases where the student did not submit any assessment (e.g. cases of student withdrawal before the assessment)"
      ) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  #theme(axis.text.x = element_text(size = 5,angle = 90)) +
  theme(panel.spacing = unit(3, "lines"))
```

```{r}

Data_Edit <- DataIPModuleResults %>%
  select(ModuleCode = 'Module code',
         Year = `Academic Year code...6`,
         Result = `Result of Module`,
         Grade = `Formatted agreed mark`,
         Outcome = `Agreed grade`,
         Level = "Level code",
         Student = "Student Candidate Number",
         EntryYear = "Year of entry",
         ActualOutcome = `Actual grade`,
         Outcome = `Agreed grade`,
         Attempt = "Current Attempt") |>
  #group_by(Student, ModuleCode, Year) |>
  #mutate(rank = row_number(desc(Attempt))) |>
  mutate(Level = case_match(
    Level,
    "PT" ~ "MA",
    "U1" ~ "UG1",
    "U2" ~ "UG2",
    "U3" ~ "UG3",
    
  )) |>
  mutate(Level = case_match(
    ModuleCode,
    "HI2006" ~ "UG2",
    .default = Level
  )) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA"))) |>
  mutate(PassMark = case_when(
    (Grade<40 & Level %in% c("UG1", "UG2", "UG3")) ~ "Fail",
    Grade<50 & Level == "MA" ~ "Fail",
    .default = "Pass"
  )) |>
  filter(Level != "MA") |>
  filter(Year %in% c("2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  #summarise(Students_Fail = sum(Result == "F", na.rm = T),
  group_by(Year, Level, ModuleCode) |>
  summarise(Students_PassMarkFail = sum(PassMark== "Fail", na.rm = T),
            Students_Tried_FA = sum(Outcome== "FA", na.rm = T),
            Students_Withdrawn = sum(Outcome== "WD", na.rm = T),
            Students_Fail_Binary = sum(Result== "F", na.rm = T),
            Students_Compensated = sum(Outcome== "CO", na.rm = T),
            Students_AM = sum(ActualOutcome== "AM", na.rm = T),
            Total_Students = n_distinct(Student)) |>
  mutate(Perc_PassMarkFail = Students_PassMarkFail/Total_Students) |>
  mutate(Perc_PassMarkFail = case_when(
    Year == "2019/0" & Perc_PassMarkFail>0.5 ~ 0,
    .default = Perc_PassMarkFail
  )) |>
  mutate(Perc_Tried_FA = Students_Tried_FA/Total_Students) |>
  mutate(Perc_Fail_Binary = Students_Fail_Binary/Total_Students) |>
  mutate(Perc_Withdrawn = Students_Withdrawn/Total_Students) |>
  mutate(Perc_Compensated = Students_Compensated/Total_Students) |>
  mutate(Perc_Compensated = Students_AM/Total_Students)  



library(hrbrthemes)

ggplot(Data_Edit) +
  geom_tile(aes(x = Year,
             y = ModuleCode,
             #label = 100*round(Perc_Fail, digits = 2),
             fill = Perc_Tried_FA),
            color = "lightgrey") +
  scale_fill_gradient(low="lightyellow", 
                      high="red", 
                      labels = scales::label_percent(accuracy = 1L),
                      limits = c(0, max(Data_Edit$Perc_Fail_Binary))) +
  facet_wrap(~Level, ncol = 3, scales = "free") +
  #  facet_grid(rows = vars(Level), scales = "free") +
  theme(axis.text.y = element_text(size = 5)) +
  labs(title = "Fail Marks (excluding Withdrawals) Across Modules",
       x = "",
       y = "Module",
     fill = "",
      caption = "The figure does not include cases where the student did not submit any assessment (e.g. cases of student withdrawal before the assessment)"
      ) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  #theme(axis.text.x = element_text(size = 5,angle = 90)) +
  theme(panel.spacing = unit(3, "lines"))
 
   

```

#### Clearing and Progression

```{r}

DataClearing <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Block = "Block...19",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`,
         Clearing = `Clearing ?`,
         ClearingResponse = `Clearing Response`,
         ClearingDecision = `Clearing Decision`,
         Outcome = `Reason for transfer`,
         Enrolled) |>
  drop_na(Student) |>
  filter(Block == "11") |>
  mutate(Clearing = case_match(
    Clearing, 
    "N" ~ "Not Clearing",
    .default = "Clearing"
  )) 

ClearingVector <- DataClearing$Student[DataClearing$Clearing=="Clearing"]




Data_Edit <- DataIPModuleResults %>%
  select(ModuleCode = 'Module code',
         Year = `Academic Year code...6`,
         Grade = `Formatted agreed mark`,
         Outcome = `Agreed grade`,
         Level = "Level code",
         Student = "Student Candidate Number",
         EntryYear = "Year of entry",
         ActualOutcome = `Actual grade`) |>
  #group_by(Student, ModuleCode, Year) |>
  #mutate(rank = row_number(desc(Attempt))) |>
  mutate(Clearing = case_when(
    Student %in% ClearingVector ~ "Clearing",
    .default = "Non-Clearing"
  ))  |>
  mutate(Level = case_match(
    Level,
    "PT" ~ "MA",
    "U1" ~ "UG1",
    "U2" ~ "UG2",
    "U3" ~ "UG3",
    
  )) |>
  mutate(Level = case_match(
    ModuleCode,
    "HI2006" ~ "UG2",
    .default = Level
  )) |>
  mutate(Level = factor(Level, c("UG1", "UG2", "UG3", "MA"))) |>
  mutate(PassMark = case_when(
    (Grade<40 & Level %in% c("UG1", "UG2", "UG3")) ~ "Fail",
    Grade<50 & Level == "MA" ~ "Fail",
    .default = "Pass"
  )) |>
  filter(Level != "MA") |>
  #filter(Level == "UG1") |>
  filter(Year %in% c("2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  #summarise(Students_Fail = sum(Result == "F", na.rm = T),
  group_by(Year, Level, Clearing) |>
  summarise(Students_Withdrawn = n_distinct(Student[Outcome== "WD"]),
            Total_Students = n_distinct(Student)) |>
  mutate(Perc_Withdrawn = Students_Withdrawn/Total_Students) |>
  mutate(Clearing = factor(Clearing, c("Non-Clearing", "Clearing"))) |>
  arrange(factor(Clearing))

   
  

ggplot(Data_Edit) +
  geom_col(aes(x = Year,
               y = Perc_Withdrawn,
               fill = Clearing),
           position = "dodge") +
geom_text(aes(x = Year, 
              y = Perc_Withdrawn + 0.004,
              label = paste0(100*round(Perc_Withdrawn, digits = 2), "%"),
              fill = Clearing),
          size = 2.5,
          fontface = "bold",
          position = position_dodge(width = .9)) +
 
  theme_bw() +
  scale_fill_manual(values = c(Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3],
                               Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3],
                               Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3],
                               Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3])) +
  labs(title = "Student Withdrawals by Entry Status",
       subtitle = "All UG Programmes",
       fill = "",
       x = "Year ",
       y = "% of Students Withdrawing") +
  theme(legend.position = "top") +
  scale_y_continuous(labels = scales::percent) +
  facet_wrap(~Level)
  
```


```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`,
         Clearing = `Clearing ?`,
         ClearingResponse = `Clearing Response`,
         ClearingDecision = `Clearing Decision`,
         Outcome = `Reason for transfer`,
         Enrolled) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Undergraduate") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  mutate(Clearing = case_match(
    Clearing, 
    "N" ~ "Non-Clearing",
    .default = "Clearing"
  )) |>
  mutate(OutcomeBin = case_match(
    Outcome,
    "Successful completion of course" ~ "Completed",
    NA ~ "Ongoing",
    .default = "Not Completed"
  )) |>
  filter(OutcomeBin != "Ongoing") |>
  summarize(NumStudent = n(), 
            .by = c(Year, Clearing, OutcomeBin)) |>
  group_by(Year, Clearing) |>
  mutate(NumStudentYear = sum(NumStudent)) |>
  mutate(PercStudentYear = round(NumStudent/NumStudentYear, digits = 2)) |>
  filter(OutcomeBin == "Not Completed") |>
  filter(Year != "2020/1",
         Year != "2021/2",
         Year != "2022/3"
         ) |>
  mutate(Clearing = factor(Clearing, c("Non-Clearing", "Clearing"))) |>
  arrange(factor(Clearing))

 

ggplot(Data_Edit) +
  geom_col(aes(x = Year,
               y = PercStudentYear,
               fill = Clearing),
           position = "dodge") +
  #geom_text(aes(x = Year, 
  #              y = PercStudentYear,
  #              fill = Clearing,
  #              label = paste0(PercStudentYear,
  #                             "%",
  #                             "\n",
  #                             "(", NumStudent, ")")),
  #          size = 2,
  #          colour = "white",
  #          position = position_stack(vjust = 0.5)
  #          #fontface = "bold"
 # ) +
  geom_text(aes(x = Year, 
                y = PercStudentYear + 0.01,
                 label = paste0(100*PercStudentYear, "%"),
                 fill = Clearing),
                 size = 2.5,
            fontface = "bold",
            position = position_dodge(width = .9)) +
  geom_text(aes(x = Year, 
                y = -0.01,
                label = paste0(NumStudent, " / ", 
                               NumStudentYear),
                fill = Clearing),
            size = 1.9,
            position = position_dodge(width = .9),
            lineheight = .8)+
  theme_minimal() +
  scale_fill_manual(values = c(Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3],
                               Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3],
                               Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3],
                               Custom_Col$Custom_Colour[1],Custom_Col$Custom_Colour[3])) +
  labs(title = "Non-Completion by Entry Status",
       subtitle = "All UG Programmes",
       fill = "",
         x = "Year of Enrollment",
       y = "% Not Graduating") +
  theme(legend.position = "top") +
  scale_y_continuous(labels = scales::percent)
  
```

### UG Awards

#### Final Awards Classification

```{r}

  

DataIPAwards |>
  select(Student = "SPR Code",
         Year = "Academic Year code",
         Mark = "Award Mark",
         Level,
         Classification = `Classification 3 code`,
         Award,
         "Route code") |>
  left_join(Programme_Name, by = join_by("Route code" == Programme_Old)) |>
  drop_na(Programme) |>
  filter(Level == "UG") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  mutate(Classification = case_match(
    Classification,
    "I" ~ "First",
    "II1" ~ "Upper Second",
    "ME" ~ "Upper Second",
    "II2" ~ "Lower Second",
    "DI"~ "First",
    NA ~ "Lower Qualification",
    "ORD-ME" ~ "Upper Second",
    "III" ~ "Third",
    .default = Classification
  )) |>
  mutate(Classification = fct_relevel(Classification, c("First","Upper Second", "Lower Second", "Third", "Lower Qualification"))) |>
 # mutate(Classification = factor(Classification, c("I", "II1", "II2", "III", "Other"))) |>
  group_by(Year) |>
  mutate(Total_Awards = n()) |>
  group_by(Year, Classification, Total_Awards) |>
  summarise(Num_Awards = n()) |>
  mutate(Perc_Awards = Num_Awards/Total_Awards) |>
  mutate(Perc_Label = case_when(
    Perc_Awards > 0.03 ~ paste0(round(Perc_Awards, digits = 2)*100,"%"),
    .default = NA
  )) |>
  ggplot() +
  geom_col(aes(x = Year,
               y = Perc_Awards,
               fill = Classification),
           position = "stack") +
  geom_text(aes(x = Year, 
                y = Perc_Awards,
                fill = Classification,
                label = Perc_Label),
            size = 2,
            #fill = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold",
            label.padding = unit(0.2, "lines"),
            show.legend = FALSE) +
  scale_y_continuous(labels = scales::percent) +
#  scale_x_discrete(limits = rev) +
  theme_classic() +
  labs(title = "UG Awards Classification Across All Programmes",
       x = "Year",
       y = "% UG Awards",
       fill = "") +
  scale_fill_brewer(palette = "Reds") +
  theme(legend.position = "top") +
 # coord_flip() +
  theme(legend.position="top")+
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
  


```


```{r}

DataIPAwards |>
  select(Student = "SPR Code",
         Year = "Academic Year code",
         Mark = "Award Mark",
         Level,
         Classification = `Classification 3 code`,
         Award,
         "Route code") |>
  left_join(Programme_Name, by = join_by("Route code" == Programme_Old)) |>
  drop_na(Programme) |>
  filter(Level == "UG") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  filter(!(Year == "2021/2" & Programme == "BA History and Politics")) |>
  mutate(Classification = case_match(
    Classification,
    "I" ~ "First",
    "II1" ~ "Upper Second",
    "ME" ~ "Upper Second",
    "II2" ~ "Lower Second",
    "DI"~ "First",
    NA ~ "Lower Qualification",
    "ORD-ME" ~ "Upper Second",
    "III" ~ "Third",
    .default = Classification
  )) |>
  mutate(Classification = fct_relevel(Classification, c("First","Upper Second", "Lower Second", "Third", "Lower Qualification"))) |>
 # mutate(Classification = factor(Classification, c("I", "II1", "II2", "III", "Other"))) |>
  group_by(Year, Programme) |>
  mutate(Total_Awards = n()) |>
  group_by(Year, Programme, Classification, Total_Awards) |>
  summarise(Num_Awards = n()) |>
  mutate(Perc_Awards = Num_Awards/Total_Awards) |>
  mutate(Perc_Label = case_when(
    Perc_Awards > 0.03 ~ paste0(round(Perc_Awards, digits = 2)*100,"%"),
    .default = NA
  )) |>
  ggplot() +
  geom_col(aes(x = Year,
               y = Perc_Awards,
               fill = Classification),
           position = "stack") +
  geom_text(aes(x = Year, 
                y = Perc_Awards,
                fill = Classification,
                label = Perc_Label),
            size = 2,
            #fill = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold",
            label.padding = unit(0.2, "lines"),
            show.legend = FALSE) +
  geom_text(
            aes(x = Year, 
                y = -0.035,
                label = Total_Awards),
            size = 2) +
  scale_y_continuous(labels = scales::percent) +
#  scale_x_discrete(limits = rev) +
  theme_minimal() +
  facet_wrap(~Programme) +
  labs(title = "UG Awards Classification by Programmes",
       x = "Year",
       y = "% UG Awards",
       fill = "") +
  scale_fill_brewer(palette = "Reds") +
  theme(legend.position = "top") +
 # coord_flip() +
  theme(legend.position="top") +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 90))
#guides(fill=guide_legend(nrow=2, byrow=TRUE))
  
  
   
   

  
 

```

#### Final Average Marks

```{r}
 

Data_Edit <-DataIPAwards |>
  select(Student = "SPR Code",
         Year = "Academic Year code",
         Mark = "Award Mark",
         Level,
         Classification = `Classification 3 code`,
         Award,
         "Route code") |>
  left_join(Programme_Name, by = join_by("Route code" == Programme_Old)) |>
  drop_na(Programme) |>
  filter(Level == "UG") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  filter(!(Year == "2021/2" & Programme == "BA History and Politics")) |>
  mutate(Classification = case_match(
    Classification,
    "I" ~ "First",
    "II1" ~ "Upper Second",
    "ME" ~ "Upper Second",
    "II2" ~ "Lower Second",
    "DI"~ "First",
    NA ~ "Lower Qualification",
    "ORD-ME" ~ "Upper Second",
    "III" ~ "Third",
    .default = Classification
  ))  

Order_Rank <- c("Lower Qualification",
                "Third",
                "Lower Second",
                "Upper Second",
                "First")


Data_Edit_summary <- Data_Edit |>
  filter(Year != "2022/3") |>
  group_by(Year) %>% 
  summarize(Year_Median = median(Mark),
            Year_1 = sum(Classification=="First"),
            Year_21 = sum(Classification=="Upper Second"),
            Year_22 = sum(Classification=="Lower Second"),
            Year_3 = sum(Classification=="Third"),
            Year_Lower = sum(Classification=="Lower Qualification"),
            Total_Student = n(),
            SD_Mark = round(sd(Mark), digits = 1)) |>
  mutate(Perc_1 = round(Year_1/Total_Student, digits = 2),
         Perc_21 = round(Year_21/Total_Student, digits = 2),
         Perc_22 = round(Year_22/Total_Student, digits = 2),
         Perc_3 = round(Year_3/Total_Student, digits = 2),
         Perc_Lower = round(Year_Lower/Total_Student, digits = 2))

Data_Edit |>
  mutate(Classification = factor(Classification, Order_Rank)) |>
  arrange(factor(Classification)) |>
  filter(Year != "2022/3") |>
  arrange() |>
  ggplot() +
  stat_density_ridges(aes(x = Mark,
                          y = Year,
                          fill = case_when(
                            ..x..<40 ~ "1. Lower Qualification",
                            ..x..<50 & ..x..>= 40 ~ "2. Third",
                            ..x..<60 & ..x..>= 50 ~ "3. Lower Second",
                            ..x..<70 & ..x..>= 60 ~ "4. Upper Second",
                            ..x..>= 70 ~ "5. First"
                          )), 
                      rel_min_height = 0.005,
                      scale = 1.2,
                      geom = "density_ridges_gradient", quantile_lines = TRUE,
                      vline_size = 1, vline_color = "white",
                      quantiles = 2) +
  geom_text(data = Data_Edit_summary,
            aes(x = Year_Median,
                y = Year,
                label= paste0("M: ", round(Year_Median, digits = 1),
                              "\n", "SD: ", SD_Mark)),
            colour = "white",
            size = 2,
            fontface = "bold",
            position=position_nudge(y=0.21,
                                    x = 2),
            lineheight = 1) +
  geom_richtext(data = Data_Edit_summary,
                aes(x = 85, 
                    y = Year,
                    label = paste0("1st: **",
                                   100*Perc_1,
                                   "%",
                                   "**",
                                   "(",
                                   Year_1,
                                   ")",
                                   "<br>", 
                                   "2:1: **",
                                   100*Perc_21,
                                   "%",
                                   "**",
                                   "(",
                                   Year_21,
                                   ")",
                                   "<br>", 
                                   "2:2: **",
                                   100*Perc_22,
                                   "%",
                                   "**",
                                   "(",
                                   Year_22,
                                   ")",
                                   "<br>", 
                                   "3rd: **",
                                   100*Perc_3,
                                   "%",
                                   "**",
                                   "(",
                                   Year_3,
                                   ")",
                                   "<br>", 
                                   "Lower: **",
                                   100*Perc_Lower,
                                   "%",
                                   "**",
                                   "(",
                                   Year_Lower,
                                   ")"
                    )),
                size = 2,
                nudge_y = 0.50,
                fill = NA,
                label.color = NA,
                lineheight = 1) +
  theme_ridges() +
  scale_fill_manual(name = NULL, 
                    values = c("1. Lower Qualification" = Custom_Col$Custom_Colour[1],
                               "2. Third" = Custom_Col$Custom_Colour[2],
                               "3. Lower Second" = Custom_Col$Custom_Colour[3],
                               "4. Upper Second" = Custom_Col$Custom_Colour[4],
                               "5. First" = Custom_Col$Custom_Colour[5])
  ) +
  theme(legend.position = "none") +
  scale_x_continuous(
    breaks =  c(30, 40, 50, 60, 70, 80, 90),
    limits = c(35, 90)) +
  labs(title = "Final Degree Classification across allUG Programmes",
       subtitle = "Vertical Line = Median Student",
       x = "Final Mark Average"
  ) +
  scale_y_discrete(limits = rev) 
  




    



```



```{r}

Data_Edit <-DataIPAwards |>
  select(Student = "SPR Code",
         Year = "Academic Year code",
         Mark = "Award Mark",
         Level,
         Classification = `Classification 3 code`,
         Award,
         "Route code") |>
  left_join(Programme_Name, by = join_by("Route code" == Programme_Old)) |>
  drop_na(Programme) |>
  filter(Level == "UG") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2")) |>
  filter(!(Year == "2021/2" & Programme == "BA History and Politics")) |>
  group_by(Year, Programme) |>
  summarise(MeanAward = mean(Mark)) |>
left_join(Custom_Col, by = join_by(Programme == Label))  


ggplot(data = Data_Edit) +
  annotate('rect',xmin= "2014/5", xmax= "2021/2", ymin=40, ymax=50,
           alpha=.8, fill="#41aa4a")+
  annotate('rect',xmin= "2014/5", xmax= "2021/2", ymin=50, ymax=60,
           alpha=.6, fill="#41aa4a")+
  annotate('rect',xmin= "2014/5", xmax= "2021/2", ymin=60, ymax=70,
           alpha=.4, fill="#41aa4a")+
  annotate('rect',xmin= "2014/5", xmax= "2021/2", ymin=70, ymax=85,
           alpha=.2, fill="#41aa4a")+
  geom_line(aes(x=Year,
                y = MeanAward,
                color = Programme,
               group = Programme)) +
  geom_point(aes(x=Year,
                y = MeanAward,
                color = Programme,
                shape = Programme)) +
  #facet_wrap(~Programme, nrow = 1) +
  ylim(40,85) +
  theme_minimal() +
  labs(title = "Final Average Mark among all UG Programmes",
       y = "Average") +
  scale_color_manual(values = unique(Data_Edit$Custom_Colour)) 
  

  



```

### After Graduation

#### Survey Results


```{r}



Temp1 <- DataEmploymentGOS |>
  select(Year = `GOS year`,
         Course = `Route code`,
         Level = `Study level (3 way)`,
         Outcome = `Positive/negative outcome`,
         Response = `Response status`,
         Activity = `Main activity`,
         Duty = `Business or self-employment employer duties`,
         Business_Name = `Business or self-employment employer name`,
         Salary = `Salary annually`,
         Currency = `Salary currency`)



Temp2 <- DataEmploymentDHLE |>
  select(Year,
         Course = `Course_code`,
         Outcome,
         Business_Name = `Employer_name`,
         Salary = `Actual_salary`,
         Currency,
         Response,
         Activity = HESA_categories
  ) 




Data_Edit <- bind_rows(Temp1, Temp2) |>
  mutate(Year = case_match(
    Year,
    "2017-2018" ~ "2017/18",
    "2018-2019" ~ "2018/19",
    "2019-2020" ~ "2019/20",
    "2020-2021" ~ "2020/21",
    .default = Year)) |>
  mutate(Outcome = case_match(
    Outcome,
    "Positive outcome" ~ "Positive Outcome",
    "Negative outcome" ~ "Negative Outcome",
    "Unemployed" ~ "Negative Outcome",
    "Other" ~ NA,
    "Non-Respondent" ~ NA,
    "Refusal" ~ NA,
    "Working or studying" ~ NA,
    "X" ~ NA,
    .default = Outcome)
  ) |>
  drop_na(Outcome) |>
  mutate(Level = case_match(
    Course,
    "IPUIPO" ~ "UG",
    "IPPIPO" ~ "PG",
    .default = Level
  )) |>
  filter(Level == "UG") |>
  group_by(Year) |>
  mutate(Num_Total = n()) |>
  ungroup() |>
  group_by(Year, Num_Total, Outcome) |>
  summarise(Num_Outcome = n()) |>
  ungroup() |>
  mutate(Perc_Outcome = Num_Outcome/Num_Total) |>
  filter(Outcome == "Positive Outcome")



ggplot(Data_Edit) +
  geom_col(aes(x = Year,
               y = Perc_Outcome ),
           fill = "#cf060b") +
  geom_text(aes(x = Year, 
                y = Perc_Outcome+0.03,
                label = paste0(round(100*Perc_Outcome),"%")),
            size = 3,
            fontface = "bold") +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "UG Students Reporting Positive Outcomes after Graduation ",
       caption = "“Positive Outcomes” = UK-domiciled students in graduate-level employment \nor further study, including study completed before the census date.  \n This measure excludes those not available for work or further study \n because they were travelling, caring or “doing  something else” from the population.",
       x = "",
       y = "% Students",
       fill = "") +
  theme(legend.position = "top") 



```

#### Widening Participation

```{r}


Temp1 <- DataEmploymentGOS |>
  select(Year = `GOS year`,
         Course = `Route code`,
         Level = `Study level (3 way)`,
         Outcome = `Positive/negative outcome`,
         Response = `Response status`,
         Activity = `Main activity`,
         Duty = `Business or self-employment employer duties`,
         Business_Name = `Business or self-employment employer name`,
         Salary = `Salary annually`,
         Currency = `Salary currency`,
         WP = `WP status`)

 

Temp2 <- DataEmploymentDHLE |>
  select(Year,
         Course = `Course_code`,
         Outcome,
         Business_Name = `Employer_name`,
         Salary = `Actual_salary`,
         Currency,
         Response,
         Activity = HESA_categories,
         WP = `WP Marker`
  ) 




Data_Edit <- bind_rows(Temp1, Temp2) |>
  mutate(WP = case_match(
    WP,
    "No" ~ "Non WP",
    "Yes" ~ "WP",
    "NO" ~ "Non WP",
    "YES" ~ "WP",
    .default = WP)) |>
  mutate(Year = case_match(
    Year,
    "2017-2018" ~ "2017/18",
    "2018-2019" ~ "2018/19",
    "2019-2020" ~ "2019/20",
    "2020-2021" ~ "2020/21",
    .default = Year)) |>
  mutate(Outcome = case_match(
    Outcome,
    "Positive outcome" ~ "Positive Outcome",
    "Negative outcome" ~ "Negative Outcome",
    "Unemployed" ~ "Negative Outcome",
    "Other" ~ NA,
    "Non-Respondent" ~ NA,
    "Refusal" ~ NA,
    "Working or studying" ~ NA,
    "X" ~ NA,
    .default = Outcome)
  ) |>
  drop_na(Outcome) |>
  mutate(Level = case_match(
    Course,
    "IPUIPO" ~ "UG",
    "IPPIPO" ~ "PG",
    .default = Level
  )) |>
  filter(Level == "UG") |>
  group_by(Year, WP) |>
  mutate(Num_Total = n()) |>
  ungroup() |>
  group_by(Year, Num_Total, WP, Outcome) |>
  summarise(Num_Outcome = n()) |>
  ungroup() |>
  mutate(Perc_Outcome = Num_Outcome/Num_Total) |>
  filter(Outcome == "Positive Outcome")



ggplot(Data_Edit) +
  geom_col(aes(x = Year,
               y = Perc_Outcome,
               fill = WP),
           position = "dodge") +
  geom_text(aes(x = Year, 
                y = Perc_Outcome+0.03,
                fill = WP,
                label = paste0(round(100*Perc_Outcome),"%")),
            size = 3,
            position = position_dodge(width = .9),
            fontface = "bold") +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "WP vs. Non-WP UK Students Reporting Positive Outcomes after Graduation",
       caption = "“Positive Outcomes” = UK-domiciled students in graduate-level employment or further study, including study completed before the census date.  \n This measure excludes those not available for work or further study because they were travelling, caring or “doing  something else” from the population.",
       x = "",
       y = "% Students",
       fill = "") +
  theme(legend.position = "top") +
  scale_fill_manual(values = c("red",  "#8a0407"))


```

#### Further Study vs. Work
```{r}


Temp1 <- DataEmploymentGOS |>
  select(Year = `GOS year`,
         Course = `Route code`,
         Level = `Study level (3 way)`,
         Outcome = `Positive/negative outcome`,
         Response = `Response status`,
         Activity = `Main activity`,
         Duty = `Business or self-employment employer duties`,
         Business_Name = `Business or self-employment employer name`,
         Salary = `Salary annually`,
         Currency = `Salary currency`,
         WP = `WP status`)

Data2 <- read_excel("Data.xlsx", sheet = "Employment-DHLE")

Temp2 <- DataEmploymentDHLE |>
  select(Year,
         Course = `Course_code`,
         Outcome,
         Business_Name = `Employer_name`,
         Salary = `Actual_salary`,
         Currency,
         Response,
         Activity = HESA_categories,
         WP = `WP Marker`
  ) 



Data_Edit <- bind_rows(Temp1, Temp2) |>
  mutate(Study = case_match(
    Activity,
    "Engaged in a course of study, training or research" ~ "Study",
    "Full time studies" ~ "Study",
    "Working and studying" ~ "Study",
    "Part time studies" ~ "Study",
    "Full-time study" ~ "Study",
    "Work and further study" ~ "Study",
    "Part-time study" ~ "Study",
    "Non respondant" ~ NA,
    .default = "Other")) |>
  mutate(Year = case_match(
    Year,
    "2017-2018" ~ "2017/18",
    "2018-2019" ~ "2018/19",
    "2019-2020" ~ "2019/20",
    "2020-2021" ~ "2020/21",
    .default = Year)) |>
  mutate(Level = case_match(
    Course,
    "IPUIPO" ~ "UG",
    "IPPIPO" ~ "PG",
    .default = Level
  )) |>
  filter(Level == "UG") |>
  drop_na(Study) |>
  group_by(Year) |>
  mutate(Num_Total = n()) |>
  ungroup() |>
  group_by(Year, Study, Num_Total) |>
  summarise(Num_Study = n()) |>
  mutate(Perc_Study = Num_Study/Num_Total)  



ggplot(Data_Edit |> filter(Study == "Study")) +
  geom_col(aes(x = Year,
               y = Perc_Study),
           fill = "#8a0407") +
  geom_text(aes(x = Year, 
                y = Perc_Study+0.015,
                label = paste0(round(100*Perc_Study),"%")),
            size = 3,
            position = position_dodge(width = .9),
            fontface = "bold") +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "UG Students in FT or PT Study",
       x = "",
       y = "% Students",
       fill = "") +
  theme(legend.position = "top") +
  scale_fill_manual(values = c( "#8a0407"))



```


### UG Competitors

#### Market Share


```{r}

library(ggpattern)




getPalette = colorRampPalette(brewer.pal(9, "RdBu"))

DataMarketShare |>
  fill(Provider) |>
  filter(Provider != "Grand Total") |>
  
  filter(`Course Title` == "Total") |>
  filter(Type == "Market Share") |>
  filter(Programme == "UG Politics" |
           Programme == "UG History" ) |>
  pivot_longer(cols = c(`15/16`,
                        `16/17`,
                        `17/18`,
                        `18/19`,
                        `19/20`),
               names_to = "Year",
               values_to = "Value") |>
  mutate(Year = case_match(
    Year,
    "15/16" ~ 2015,
    "16/17"~ 2016,
    "17/18" ~ 2017,
    "18/19" ~ 2018,
    "19/20" ~ 2019,
  )) |>
  mutate(ProviderLabel = case_when(
         Year == 2019 & Value>0.03 ~ paste0(Provider, 
                                            " (", 
                                            round(Value, digits = 2)*100,
                                            "%)"),
         Year == 2019 & Provider == "City University" ~ paste0(Provider, 
                                                               " (", 
                                                               round(Value, digits = 2)*100,
                                                               "%)"),
         .default = NA)) |>
  mutate(isCity = case_when(
    Provider == "City University" ~ "City",
    .default = "Other"))  |>
  #filter(Provider == "City University") |>
  ggplot() +
  geom_area_pattern(aes(x = Year,
                y = Value,
                group = Provider,
                pattern = Provider,
                fill = Provider),
                color = "darkgray",
            position = "fill",
            show.legend = FALSE) +
  geom_label(aes(x = Year+0.3, 
                 y  = Value,
                  fill = Provider,
                  label = ProviderLabel),
              size = 2,
              colour = "black",
              position = position_stack(vjust = 0.5),
              fontface = "bold",
             show.legend = FALSE) +
  facet_wrap(~Programme) +
  labs(title = "Undergraduate London's Market Share",
       subtitle = "",
       y = "",
       x ="",
       caption = "Source: City's Strategy, Planning and Performance Unit",) +
  theme_light()  +
  #scale_color_manual(values = c("red", "gray")) +
  scale_y_continuous(labels = scales::percent) +
  scale_pattern_manual(
    values = c(
      "UCL" = "none",
      "King's College"  = "none",
      "Queen Mary" =  "none",
      "City University" = "stripe",
      "LSE" =  "none",
      "Royal Holloway"  = "none",
      "Brunel" = "none",
      "Goldsmiths"  = "none",
      "Westminster" =  "none",    
      "Birkbeck"  = "none",
      "SOAS"  = "none",
      "Greenwich"  = "none",
      "Middlesex" =  "none",      
      "East London"  = "none",
      "Kingston"  = "none",
      "London Met"  = "none",
       "West London"  = "none",
      "South Bank" = "none",
      "St Mary Tw'ham"  = "none", 
      "Roehampton"  = "none",
      "Arts London"  = "none"
  )) +
  scale_fill_manual(values = getPalette(21)) +
  xlim(2015, 2019.7) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
  
   


```



```{r}

 


DataMarketShare |>
  fill(Provider) |>
  filter(`Course Title` == "Total") |>
  filter(Type == "Market Share") |>
  pivot_longer(cols = c(`15/16`,
                        `16/17`,
                        `17/18`,
                        `18/19`,
                        `19/20`),
               names_to = "Year",
               values_to = "Value") |>
  mutate(Year = case_match(
         Year,
         "15/16" ~ 2015,
         "16/17"~ 2016,
         "17/18" ~ 2017,
         "18/19" ~ 2018,
         "19/20" ~ 2019,
         )) |>
  filter(Provider == "City University") |>
  ggplot() +
  geom_area(aes(x = Year,
                y = Value,
                fill = Programme),
            show.legend = FALSE) +
  facet_wrap(~Programme) +
  labs(title = "Undergraduate London's Market Share",
       subtitle = "",
       y = "",
       x ="",
       caption = "Source: City's Strategy, Planning and Performance Unit",) +
  theme_light()  +
  scale_y_continuous(labels = scales::percent)  +
  scale_fill_manual(values = c("#8a0407","#0f52ba"))
   


```


#### Shared Offers

```{r}


Data_Edit <- DataSharedOffers |>
 select(Programme, 
         Competitor = `Other Provider short name`,
         Year = `Year (int)`, 
         London = `Other London marker`,
         SharedOffers = `Unique "other" course apps (Rounded)`,
         Win = `D2 - Win % ratio`
         ) |>
  group_by(Programme, London, Competitor) |>
  summarise(SharedOffers = mean(SharedOffers, na.rm = T),
            Win = mean(Win, na.rm = T)) |>
  group_by(Programme) |>
  mutate(rank = row_number(-SharedOffers)) |>
  mutate(Firm = case_when(
    Win>1 ~ "City as Firm",
    .default  = "City as Insurance" 
  )) |>
  mutate(Competition = case_when(
    Win<=0.1 ~ -10,
    Win >= 0.1 & Win<0.111111  ~ -9,
    Win >= 0.11111111 & Win<0.125  ~ -8,
    Win >= 0.125 & Win<0.142  ~ -7,
    Win >= 0.142 & Win <=0.166666~ -6,
    Win >= 0.166666 & Win<=0.2~ --5,
    Win >= 0.2 & Win<=0.25~ -4,
    Win >= 0.25 & Win<=0.3333 ~ -3,
    Win >= 0.33333 & Win <0.5 ~ -2,
    Win >= 0.5 & Win < 1 ~ -1,
    Win == 1 ~ 0,
    Win > 1 & Win <= 2 ~ 1,
    Win > 2 & Win <= 3 ~ 2,
    Win > 3 & Win <= 4 ~ 3,
    Win > 4 & Win <= 5 ~ 4,
    Win > 5 & Win <= 6 ~ 5,
    Win > 6 & Win <= 7 ~ 6,
    Win > 7 & Win <= 8 ~ 7,
    Win > 8 & Win <= 9 ~ 8,
    Win > 9 & Win < 10 ~ 9,
    Win > 10  ~ 10,
  ))
            

Data_Edit |>
  filter(Programme == "IP Dep All") |>
  filter(rank <21) |>
  ggplot(aes(y =  reorder(Competitor, SharedOffers),
             x = SharedOffers,
           label = as.character(SharedOffers),
           colour = London)) +
  geom_segment(aes(
    xend = 0,
    yend = reorder(Competitor, SharedOffers)), 
    color = "black") +
  geom_point(stat='identity' , size=5)  +
  geom_text(color="white", size=2) +
  labs(title = "Shared Offers 2017-2021",
       subtitle = "All UG programmes in the IP Department",
       y = "",
       x ="Average Number of Shared Offers",
       colour = "") +
  theme_minimal()  +
  scale_color_manual(values = c("darkred", "#fb8d8f")) +
  #scale_x_continuous(labels = scales::percent) +
  theme(axis.text.y = element_text(lineheight = 0.75)) +
  theme(strip.text.y = element_text(size = 8)) 

```


```{r}

Data_Edit <- DataSharedOffers |>
  select(Programme, 
         Competitor = `Other Provider short name`,
         Year = `Year (int)`, 
         London = `Other London marker`,
         SharedOffers = `Unique "other" course apps (Rounded)`,
         Win = `D2 - Win % ratio`
         ) |>
  group_by(Programme, London, Competitor) |>
  summarise(SharedOffers = mean(SharedOffers, na.rm = T),
            Win = mean(Win, na.rm = T)) |>
  group_by(Programme) |>
  mutate(rank = row_number(-SharedOffers)) |>
  mutate(Firm = case_when(
    Win>1 ~ "City as Firm",
    .default  = "City as Insurance" 
  )) |>
  mutate(Competition = case_when(
    Win<=0.1 ~ -10,
    Win >= 0.1 & Win<0.111111  ~ -9,
    Win >= 0.11111111 & Win<0.125  ~ -8,
    Win >= 0.125 & Win<0.142  ~ -7,
    Win >= 0.142 & Win <=0.166666~ -6,
    Win >= 0.166666 & Win<=0.2~ --5,
    Win >= 0.2 & Win<=0.25~ -4,
    Win >= 0.25 & Win<=0.3333 ~ -3,
    Win >= 0.33333 & Win <0.5 ~ -2,
    Win >= 0.5 & Win < 1 ~ -1,
    Win == 1 ~ 0,
    Win > 1 & Win <= 2 ~ 1,
    Win > 2 & Win <= 3 ~ 2,
    Win > 3 & Win <= 4 ~ 3,
    Win > 4 & Win <= 5 ~ 4,
    Win > 5 & Win <= 6 ~ 5,
    Win > 6 & Win <= 7 ~ 6,
    Win > 7 & Win <= 8 ~ 7,
    Win > 8 & Win <= 9 ~ 8,
    Win > 9 & Win < 10 ~ 9,
    Win > 10  ~ 10,
  ))
 


# Install and Load Treemapify package
#install.packages("treemapify")
library(treemapify)

# Load ggplot
library(ggplot2) 


# plot
ggplot(data = Data_Edit |>
         filter(Programme == "IP Dep All") |>
         filter(rank <21), 
       aes(area = SharedOffers, 
           fill = Competition, 
           label = paste0(Competitor),
           subgroup = Firm)) +
  geom_treemap() +
  geom_treemap_text( 
                    colour = "black", 
                    place = "centre",
                    grow = FALSE) +
  scale_fill_gradient2(high ="#007417", mid = "white", low =  "darkred") +
  theme(legend.position = "top") +
  labs(title = "Shared Offers 2017-2021",
       subtitle = "All UG programmes in the IP Department",
       y = "",
       x ="Average Number of Shared Offers",
       fill = "Students' Order",
       caption = "The Score measure the likelihood that students with \nshared offer will put City as their first or insurance choice.\n Scores lower than 0 indicate that City is more likely to be the insurance choice ")

```

```{r}

Data_Edit <- DataSharedOffers |>
  select(Programme, 
         Competitor = `Other Provider short name`,
         Year = `Year (int)`, 
         London = `Other London marker`,
         SharedOffers = `Unique "other" course apps (Rounded)`,
         Win = `D2 - Win % ratio`
         ) |>
  group_by(Programme, London, Competitor) |>
  summarise(SharedOffers = mean(SharedOffers, na.rm = T),
            Win = mean(Win, na.rm = T)) |>
  group_by(Programme) |>
  mutate(rank = row_number(-SharedOffers)) |>
  mutate(Firm = case_when(
    Win>1 ~ "City as Firm",
    .default  = "City as Insurance" 
  )) |>
  mutate(Competition = case_when(
    Win<=0.1 ~ -10,
    Win >= 0.1 & Win<0.111111  ~ -9,
    Win >= 0.11111111 & Win<0.125  ~ -8,
    Win >= 0.125 & Win<0.142  ~ -7,
    Win >= 0.142 & Win <=0.166666~ -6,
    Win >= 0.166666 & Win<=0.2~ --5,
    Win >= 0.2 & Win<=0.25~ -4,
    Win >= 0.25 & Win<=0.3333 ~ -3,
    Win >= 0.33333 & Win <0.5 ~ -2,
    Win >= 0.5 & Win < 1 ~ -1,
    Win == 1 ~ 0,
    Win > 1 & Win <= 2 ~ 1,
    Win > 2 & Win <= 3 ~ 2,
    Win > 3 & Win <= 4 ~ 3,
    Win > 4 & Win <= 5 ~ 4,
    Win > 5 & Win <= 6 ~ 5,
    Win > 6 & Win <= 7 ~ 6,
    Win > 7 & Win <= 8 ~ 7,
    Win > 8 & Win <= 9 ~ 8,
    Win > 9 & Win < 10 ~ 9,
    Win > 10  ~ 10,
  ))
            
  


# Install and Load Treemapify package
#install.packages("treemapify")
library(treemapify)

# Load ggplot
library(ggplot2) 


IPProgs <- c("BA History", 
             "BA History and Politics",
             "BSc International Political Economy",     
             "BSc International Politics",              
             "BSc International Politics and Sociology",
             "BSc Politics")
# plot
ggplot(data = Data_Edit |>
         filter(Programme %in% IPProgs) |>
         filter(rank <21), 
       aes(area = SharedOffers, 
           fill = Competition, 
           label = paste0(Competitor),
           subgroup = Firm)) +
  geom_treemap() +
  geom_treemap_text( 
                    colour = "black", 
                    place = "centre",
                    grow = FALSE) +
  scale_fill_gradient2(high ="#007417", mid = "white", low =  "darkred") +
  theme(legend.position = "bottom") +
  facet_wrap(~Programme) +
  labs(title = "Shared Offers 2017-2021",
       subtitle = "All UG programmes in the IP Department",
       y = "",
       x ="Average Number of Shared Offers",
       fill = "Students' Preference",
       caption = "The Score measure the likelihood that students with \nshared offer will put City as their first or insurance choice.\n Scores lower than 0 indicate that City is more likely to be the insurance choice ")

```

#### University Tables

##### Composite Table

```{r}
 
DataGuardian <- read_excel("Data.xlsx", sheet = "Guardian") |>
  mutate(Provider = "Guardian")
DataTimes <- read_excel("Data.xlsx", sheet = "Times Table") |>
  mutate(Provider = "Times")
DataComplete <- read_excel("Data.xlsx", sheet = "Complete University Guide Table") |>
  mutate(Provider = "Complete University Guide")



bind_rows(DataGuardian, DataTimes, DataComplete) |>
  filter(Name == "Total Score" |
           Name == "Overall Score") |>
  mutate(Name = "Overall Score") |>
  select(Name, Provider,
         Year = `Publication year`,
         Percentile = `Percentile of Value (Adjusted SSR)`,
         Programme,
         Comparison
         ) |>
  mutate(Programme = fct_relevel(Programme, "Politics", "City", "History")) |>
  mutate(Comparison = fct_relevel(Comparison, "UK")) |>
  mutate(Percentile = Percentile * 100) |>
  ggplot() +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=0,ymax=33, size=0.5, alpha=0.2,
            fill = "#eee4ee") +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=34,ymax=66, size=0.5,
            fill = "white") +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=67,ymax=100, size=0.5, alpha=0.2,
            fill = "#e4eeee") +
  geom_hline(yintercept = 50, color = "lightgray", alpha = 0.5)+
  geom_smooth(aes(x = Year,
                  y = Percentile),
              colour = "darkred",
              show.legend = F) +
  geom_point(aes(x = Year,
                 y = Percentile,
                 color = Provider),
             alpha = 0.3) +
  #facet_wrap(~Name, ncol = 1) +
  #facet_wrap(~ Programme) +
  facet_grid(Comparison ~ Programme, switch = "y") +
  ylim(0,100) +
  theme_bw()  +
  labs(title = "Composite University Ranking",
       #subtitle = "Percentile Ranking",
       #caption = "Source: City's Strategy, Planning and Performance Unit",
       x = "",
       y = "Percentile",
       fill = "",
       color = "") +
  scale_y_continuous(position = "right") +
  scale_x_continuous(breaks=17:23) +
  theme(strip.text.y.left = element_text(angle = 0)) +
  theme(legend.position = "bottom",
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(-10,-10,-10,-10))   
# theme(strip.text.y.left = element_text(colour = strip))
 

```


##### Guardian 

```{r}
 
Data <- read_excel("Data.xlsx", sheet = "Guardian") 

library(ggh4x)
strip <- strip_themed(background_y = elem_list_rect(color = 
                                                      c(
                                                        "red", "black",
                                                        "black","black",
                                                        "black","black",
                                                        "black","black",
                                                        "black","black")),
                      text_y = elem_list_text(color = 
                                              c(
                                                "red", "black",
                                                "black","black",
                                                "black","black",
                                                "black","black",
                                                "black","black")))


Data |>
  rename(Percentile = `Percentile of Value (Adjusted SSR)`,
         Year = `Publication year`) |>
  mutate(Name = fct_relevel(Name, "Total Score")) |>
  #filter(Programme == "Politics") |>
  #filter(Comparison == "UK") |>
  mutate(Percentile = Percentile * 100) |>
  ggplot() +
  geom_rect(xmin =18.5, xmax = 23.5,
            ymin=0,ymax=33, size=0.5, alpha=0.2,
            fill = "#eee4ee") +
  geom_rect(xmin =18.5, xmax = 23.5,
            ymin=34,ymax=66, size=0.5,
            fill = "white") +
  geom_rect(xmin =18.5, xmax = 23.5,
            ymin=67,ymax=100, size=0.5, alpha=0.2,
            fill = "#e4eeee") +
  geom_hline(yintercept = 50, color = "lightgray", alpha = 0.5)+
  geom_line(aes(x = Year,
                y = Percentile,
                group = Programme,
                color = Programme),
            show.legend = F) +
  geom_point(aes(x = Year,
                 y = Percentile,
                 color = Programme)) +
  #facet_wrap(~Name, ncol = 1) +
  facet_grid2(Name  ~ Comparison, switch = "y",
             strip = strip) +
  ylim(0,100) +
  theme_bw()  +
labs(title = "Guardian University Ranking",
     subtitle = "Percentile Ranking",
     #caption = "Source: City's Strategy, Planning and Performance Unit",
     x = "",
     y = "Percentile",
     fill = "",
     color = "") +
  scale_y_continuous(position = "right") +
  theme(strip.text.y.left = element_text(angle = 0)) +
  theme(legend.position = "top")  
 # theme(strip.text.y.left = element_text(colour = strip))


   
```

##### Times Table

```{r}

 
Data <- read_excel("Data.xlsx", sheet = "Times Table") 

library(ggh4x)
strip <- strip_themed(background_y = elem_list_rect(color = 
                                                      c(
                                                        "red", "black",
                                                        "black","black",
                                                        "black","black",
                                                        "black","black",
                                                        "black","black")),
                      text_y = elem_list_text(color = 
                                              c(
                                                "red", "black",
                                                "black","black",
                                                "black","black",
                                                "black","black",
                                                "black","black")))


Data |>
  rename(Percentile = `Percentile of Value (Adjusted SSR)`,
         Year = `Publication year`) |>
  mutate(Name = fct_relevel(Name, "Total Score")) |>
  group_by(Name) |>
  mutate(NumHistPol = sum(Programme %in% c("Politics", "History"))) |>
  filter(NumHistPol>0) |>
  #filter(Programme == "Politics") |>
  #filter(Comparison == "UK") |>
  mutate(Percentile = Percentile * 100) |>
  ggplot() +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=0,ymax=33, size=0.5, alpha=0.2,
            fill = "#eee4ee") +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=34,ymax=66, size=0.5,
            fill = "white") +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=67,ymax=100, size=0.5, alpha=0.2,
            fill = "#e4eeee") +
  geom_hline(yintercept = 50, color = "lightgray", alpha = 0.5)+
  geom_line(aes(x = Year,
                y = Percentile,
                group = Programme,
                color = Programme),
            show.legend = F) +
  geom_point(aes(x = Year,
                 y = Percentile,
                 color = Programme)) +
  #facet_wrap(~Name, ncol = 1) +
  facet_grid2(Name  ~ Comparison, switch = "y",
             strip = strip) +
  ylim(0,100) +
  theme_bw()  +
labs(title = "Time Good University Guide",
     subtitle = "Percentile Ranking",
     #caption = "Source: City's Strategy, Planning and Performance Unit",
     x = "",
     y = "Percentile",
     fill = "",
     color = "") +
  scale_y_continuous(position = "right") +
  scale_x_continuous(breaks=17:23) +
    theme(strip.text.y.left = element_text(angle = 0)) +
  theme(legend.position = "top")   
 # theme(strip.text.y.left = element_text(colour = strip))


   
```

##### Complete University Guide

```{r}

library(readxl)
library(tidyverse)

 

library(ggh4x)
strip <- strip_themed(background_y = elem_list_rect(color = 
                                                      c(
                                                        "red", "black",
                                                        "black","black",
                                                        "black","black",
                                                        "black","black",
                                                        "black","black")),
                      text_y = elem_list_text(color = 
                                              c(
                                                "red", "black",
                                                "black","black",
                                                "black","black",
                                                "black","black",
                                                "black","black")))


Data |>
  rename(Percentile = `Percentile of Value (Adjusted SSR)`,
         Year = `Publication year`) |>
  mutate(Name = fct_relevel(Name, "Overall Score")) |>
  group_by(Name) |>
  mutate(NumHistPol = sum(Programme %in% c("Politics", "History"))) |>
  filter(NumHistPol>0) |>
  #filter(Programme == "Politics") |>
  #filter(Comparison == "UK") |>
  mutate(Percentile = Percentile * 100) |>
  ggplot() +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=0,ymax=33, size=0.5, alpha=0.2,
            fill = "#eee4ee") +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=34,ymax=66, size=0.5,
            fill = "white") +
  geom_rect(xmin =16.5, xmax = 23.5,
            ymin=67,ymax=100, size=0.5, alpha=0.2,
            fill = "#e4eeee") +
  geom_hline(yintercept = 50, color = "lightgray", alpha = 0.5)+
  geom_line(aes(x = Year,
                y = Percentile,
                group = Programme,
                color = Programme),
            show.legend = F) +
  geom_point(aes(x = Year,
                 y = Percentile,
                 color = Programme)) +
  #facet_wrap(~Name, ncol = 1) +
  facet_grid2(Name  ~ Comparison, switch = "y",
             strip = strip) +
  ylim(0,100) +
  theme_bw()  +
labs(title = "Complete University Guide",
     subtitle = "Percentile Ranking",
     #caption = "Source: City's Strategy, Planning and Performance Unit",
     x = "",
     y = "Percentile",
     fill = "",
     color = "") +
  scale_y_continuous(position = "right") +
  scale_x_continuous(breaks=17:23) +
    theme(strip.text.y.left = element_text(angle = 0)) +
  theme(legend.position = "top")   
 # theme(strip.text.y.left = element_text(colour = strip))


   
```

#### Applications and League Tables

```{r}

Data_Ranking <- read_excel("Data.xlsx", sheet = "All Ranking 2023") |>
  filter(Provider != "Complete University Guide") |>
  group_by(University, Subject) |>
  summarize(Ranking = mean(Percentile))  

CityIP <- Data_Ranking |>
  filter(University == "City University",
         Subject == "Politics") |>
  select(Ranking) |>
  distinct() |>
  pull()

CityHistory <- Data_Ranking |>
  filter(University == "City University",
         Subject == "History") |>
  select(Ranking) |>
  distinct() |>
  pull()

Data_Ranking_Politics <- Data_Ranking |>
  filter(Subject == "Politics") |>
  mutate(Ranking_Difference = Ranking - CityIP) 

Data_Ranking_History <- Data_Ranking |>
  filter(Subject == "History") |>
  mutate(Ranking_Difference = Ranking - CityHistory) 
           

Data_Ranking_All <- bind_rows(Data_Ranking_History, Data_Ranking_Politics)
 

Data_Offer <- DataSharedOffers |>
  select(Programme, 
         Competitor = `Other Provider short name`,
         Year = `Year (int)`, 
         London = `Other London marker`,
         SharedOffers = `Unique "other" course apps (Rounded)`,
         Win = `D2 - Win % ratio`
  ) |>
  group_by(Programme, London, Competitor) |>
  summarise(SharedOffers = mean(SharedOffers, na.rm = T),
            Win = mean(Win, na.rm = T)) |>
  group_by(Programme) |>
  mutate(rank = row_number(-SharedOffers)) |>
  mutate(Firm = case_when(
    Win>1 ~ "City as Firm",
    .default  = "City as Insurance" 
  )) |>
  mutate(Competition = case_when(
    Win<=0.1 ~ -10,
    Win >= 0.1 & Win<0.111111  ~ -9,
    Win >= 0.11111111 & Win<0.125  ~ -8,
    Win >= 0.125 & Win<0.142  ~ -7,
    Win >= 0.142 & Win <=0.166666~ -6,
    Win >= 0.166666 & Win<=0.2~ --5,
    Win >= 0.2 & Win<=0.25~ -4,
    Win >= 0.25 & Win<=0.3333 ~ -3,
    Win >= 0.33333 & Win <0.5 ~ -2,
    Win >= 0.5 & Win < 1 ~ -1,
    Win == 1 ~ 0,
    Win > 1 & Win <= 2 ~ 1,
    Win > 2 & Win <= 3 ~ 2,
    Win > 3 & Win <= 4 ~ 3,
    Win > 4 & Win <= 5 ~ 4,
    Win > 5 & Win <= 6 ~ 5,
    Win > 6 & Win <= 7 ~ 6,
    Win > 7 & Win <= 8 ~ 7,
    Win > 8 & Win <= 9 ~ 8,
    Win > 9 & Win < 10 ~ 9,
    Win > 10  ~ 10,
  )) |>
 # mutate(Competition = Competition*(-1)) |>
  mutate(University = case_match(
    Competitor,
    "Birkbeck" ~ NA,
    "KCL" ~ "King's College",
    "London South Bank" ~   "South Bank",      
    "Kingston"  ~ NA,               
    "London Metropolitan" ~ "London Met",
    "University of West London" ~ NA,
    "Aston University" ~ "Aston",         
    "Manchester Metropolitan" ~ "Manchester Met",
    "Nottingham Trent" ~ "N'ham Trent",
    "UEA" ~ "East Anglia",
    .default = Competitor
  ))

Data_Offer_History <- Data_Offer |>
  filter(Programme == "BA History" | 
           Programme == "BA History and Politics" ) |>
  group_by(University) |>
  summarise(Competition = mean(Competition, na.rm = T),
            SharedOffers = sum(SharedOffers)
            ) |>
  mutate(Programme = "History/History & Politics") |>
  left_join(Data_Ranking_History) |>
  drop_na(University)

Data_Offer_Politics <- Data_Offer |>
  filter(Programme == "IP/IPE/Pol/IPS")|>
  left_join(Data_Ranking_Politics)

Data_Offer_Combined <- bind_rows(Data_Offer_History, Data_Offer_Politics) |>
  group_by(Programme) |>
  mutate(rank = row_number(-SharedOffers))



library(ggrepel)
ggplot(Data_Offer_Combined) +
  geom_point(aes(x = Ranking_Difference,
                 y = Competition,
                 size = SharedOffers,
                 color = Programme),
             alpha = 0.6,
             show.legend = FALSE
             ) +
  geom_text_repel(data = Data_Offer_Combined |> filter(rank<10),
                   aes(x = Ranking_Difference,
                       y = Competition,
                       label = University),
                   size = 2.6) +
  facet_wrap(~Programme) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  theme_light() +
  scale_fill_manual(values = Custom_Col$Custom_Colour[1:3]) +
  labs(title = "Applications and University Ranking",
       x = "Gap with City in League Tables (Guardian/Times 2023)",
       y = "City as Insurance vs. Firm Choice \nin Shared Applications") +
  theme(legend.position = "bottom")
                   

```



 
 

### NSS

#### NSS Across Time

```{r}

Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "The teaching on my course"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = -0.1,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 30, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(-0.15,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 
   
```



```{r}
 


Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "Learning opportunities"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = -0.1,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 30, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(-0.15,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 
   
```



```{r}


Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "Assessment and feedback"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = 0.93,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 30, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(0,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 
```




```{r}



Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "Academic support"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = -0.1,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 40, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(-0.15,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 

```




```{r}



Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "Organisation and management"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = -0.1,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 40, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(-0.15,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 

```


```{r}



Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "Learning resources"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = -0.1,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 40, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(-0.15,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 
```



```{r}


Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "Learning community"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = -0.1,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 60, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(-0.15,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 
```



```{r}



Data_Edit <- DataNSSHistorical |>
  #  filter(Programme %in% c("UG International Politics",
  #                          "UG History",
  #                          "SASS",
  #                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "BSc Politics",
       "BSc International Political Economy",     
       "BSc International Politics",
       "BSc International Politics and Sociology",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         "UG History",
         "BSc Politics",
         "BSc International Political Economy",     
         "BSc International Politics",
         "BSc International Politics and Sociology",
         SASS,
         City
  ) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Theme_Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
#mutate(Theme = str_wrap(Theme, width = 15) ) |>


Data_Edit$Theme <- fct_reorder(Data_Edit$Theme, Data_Edit$Theme_Order) 

Data_Summary <- Data_Edit |>
  group_by(Question, Group) |>
  summarize(MeanAgree = mean(Agree, na.rm = T)) |>
  mutate(MeanAgree = paste0(100*round(MeanAgree, digits = 2), "%")) |>
  pivot_wider(names_from = Group,
              values_from = MeanAgree) |>
  mutate(NSS_Label = paste0("**Average  2017-22**",
                            "<br>",
                            "**IP All**: ", IP,"; ",
                            "**Hist**: ", `UG History`, "; ",
                            "**IP**: ", `BSc International Politics`, "; ", "<br>",
                            "**IP&S**: ", `BSc International Politics and Sociology`, "; ",
                            "**IPE**: ", `BSc International Political Economy`, "; ",
                            "**Pol**: ", `BSc Politics`, "; ",
                            "<br>",
                            "**SASS**: ", SASS, "; ",
                            "**City**: ", City
  )) |>
  select(Question, NSS_Label)


Selected_Theme <- "Student Voice"

ggplot(data = Data_Edit |> 
         filter(Group == "IP") |>
         filter(Theme == Selected_Theme) |>
         left_join(Data_Summary)) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_col(aes(x = Year,
               y = Agree,
               fill = Question),
           colour = "darkred",
           show.legend = FALSE) +
  geom_richtext(aes(y = -0.1,
                     x = 2019.5,
                     label = NSS_Label
                     ),
                size = 2.5,
                fill = NA,
                color = "darkred",
                label.color = NA,
                lineheight = 1) +
  facet_wrap(~Question, nrow = 1, 
             labeller = label_wrap_gen(
               width = 40, multi_line = TRUE)) +
  labs(title = paste0("NSS Scores - ", Selected_Theme),
       subtitle = "All UG programmes in the IP Department",
       x = "",
       y ="% Agree",
       color = "") +
  theme_light()  +
  scale_fill_brewer(palette = "Reds") +
  scale_y_continuous(labels = scales::percent,
                     limits = c(-0.15,1)) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(strip.text = element_text(face="bold", size=10)) +
  theme(strip.background = element_rect(fill="darkred", colour="darkgrey",size=1)) 
```

#### Latest NSS (2022)

```{r}


DataNSSHistorical |>
  select(Year, 
         Programme,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Agree = `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = Agree) |>
  mutate(IP_All = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
      `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  filter(Year == 2022) |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
                             )) |>
  #mutate(Theme = str_wrap(Theme, width = 15) ) |>
  ggplot(aes(x = IP_All,
             y = Question,
             label = 100*round(IP_All, digits = 2),
             colour = Theme)) +
  geom_segment(aes(
    xend = 0,
    yend = Question), 
    color = "black") +
  geom_point(stat='identity' , size=5,
             show.legend = FALSE)  +
  geom_text(color="white", size=2, fontface = "bold") +
  facet_grid(vars(Theme), 
             scales = "free",
             space = "free",
             labeller = label_wrap_gen(
               width = 15, multi_line = TRUE)) +
  labs(title = "National Student Survey 2022",
       subtitle = "All UG programmes in the IP Department",
       y = "",
       x ="% Agree") +
  theme_light()  +
  scale_x_continuous(labels = scales::percent) +
  theme(axis.text.y = element_text(lineheight = 0.75)) +
  theme(strip.text.y = element_text(size = 8))
```


```{r}


Temp <- DataNSSHistorical |>
  filter(Programme %in% c("UG International Politics",
                          "UG History",
                          "SASS",
                          "City")) |>
  select(Year,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Programme,
         `Sum of % Agree`) |>
  pivot_wider(names_from = Programme,
              values_from = `Sum of % Agree`) |>
  group_by(Year, Theme, Question) %>% 
  #fill(color, age, gender) %>% #default direction down
  fill("UG International Politics",
       "UG History",
       "SASS",
       "City", .direction = "downup") |>
  mutate(IP = case_when(
    Year %in% c(2022, 2021)  ~ (`UG International Politics` * 131 +
                                  `UG History` * 25)/(131+25),
    .default = `UG International Politics`
  )) |>
  select(Year,
         Question,
         Theme,
         IP,
         SASS,
         City) |>
  pivot_longer(cols = IP:City,
               names_to = "Group",
               values_to = "Agree") |>
  filter(Year == 2022) |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  #mutate(Theme = fct_reorder(Theme, -Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(Theme, Theme_Order)) 
     
  
    
ggplot(Temp) +
  # geom_segment(aes(
  #   xend = 0,
  #   yend = Question), 
  #   color = "black") +
  geom_point(aes(x = Agree,
                 y = fct_reorder(Question, -Order),
                 colour = Group),
             stat='identity' , size=3) +
  facet_grid(vars(fct_reorder(Theme, Theme_Order)), 
             scales = "free",
             space = "free",
             labeller = label_wrap_gen(
               width = 15, multi_line = TRUE)) +
  labs(title = "National Student Survey 2022",
       subtitle = "All UG programmes in the IP Department",
       y = "",
       x ="% Agree",
       color = "") +
  theme_light()  +
  scale_color_manual(values = c("lightgrey", "red", "darkgrey")) +
  scale_x_continuous(labels = scales::percent) +
  theme(axis.text.y = element_text(lineheight = 0.75)) +
  theme(strip.text.y = element_text(size = 8)) +
  theme(legend.position = "top")

  
```


```{r}



DataNSSHistorical |>
  select(Year, 
         Programme,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Agree = `Sum of % Agree`) |>

  filter(Programme == "UG History") |>
  filter(Year == 2022) |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
                             )) |>
  #mutate(Theme = str_wrap(Theme, width = 15) ) |>
  ggplot(aes(x = Agree,
             y = Question,
             label = 100*round(Agree, digits = 2),
             colour = Theme)) +
  
  geom_segment(aes(
    xend = 0,
    yend = Question), 
    color = "black") +
  geom_point(stat='identity' , size=5,
             show.legend = FALSE)  +
  geom_text(color="white", size=2, fontface = "bold") +
  facet_grid(vars(Theme), 
             scales = "free",
             space = "free",
             labeller = label_wrap_gen(
               width = 15, multi_line = TRUE)) +
  labs(title = "National Student Survey 2022",
       subtitle = "UG History programmes",
       y = "",
       x ="% Agree") +
  theme_light()  +
  scale_x_continuous(labels = scales::percent)
```


```{r}
 



DataNSSHistorical |>
  select(Year, 
         Programme,
         Question = `Question/Theme`,
         Theme = `Theme Group`,
         Agree = `Sum of % Agree`) |>
  filter(Programme == "UG International Politics") |>
  filter(Year == 2022) |>
  mutate(Theme_Order = case_match(
    Theme,
    "The teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and feedback" ~ 3,
    "Academic support" ~ 4,
    "Organisation and management" ~ 5,
    "Learning resources" ~ 6,
    "Learning community" ~ 7,
    "Student Voice" ~ 8   
  )) |>
  mutate(Question = str_wrap(Question, width = 60) 
  ) |>
  mutate(Order = as.numeric(word(Question, 1))) |> 
  mutate(Theme = fct_reorder(Theme, -Order)) |>
  mutate(Question = fct_reorder(Question, -Order)) |>
  mutate(Theme = fct_reorder(as.factor(Theme), Theme_Order
                             )) |>
  #mutate(Theme = str_wrap(Theme, width = 15) ) |>
  ggplot(aes(x = Agree,
             y = Question,
             label = 100*round(Agree, digits = 2),
             colour = Theme)) +
  
  geom_segment(aes(
    xend = 0,
    yend = Question), 
    color = "black") +
  geom_point(stat='identity' , size=5,
             show.legend = FALSE)  +
  geom_text(color="white", size=2, fontface = "bold") +
  facet_grid(vars(Theme), 
             scales = "free",
             space = "free",
             labeller = label_wrap_gen(
               width = 15, multi_line = TRUE)) +
  labs(title = "National Student Survey 2022",
       subtitle = "UG IP, IP&Sociology, IPE, Politics",
       y = "",
       x ="% Agree") +
  theme_light()  +
  scale_x_continuous(labels = scales::percent) +
  theme(axis.text.y = element_text(lineheight = 0.75)) +
  theme(strip.text.y = element_text(size = 8))
  
 


```

#### Comparison with Other UK Programmes

```{r}
 
Data <- read_excel("Data.xlsx", sheet = "NSS Benchmark All")



Data |>
  select(University = `Provider short name`,
         Subject = `Subject (Capitalized first letter)`,
         Question,
         Agree = `Avg. % Agree`,
         Rank = `Rank of Avg. % Agree`,
         Percentile = `Percentile of Avg. % Agree`) |>
  filter(Subject == "Politics") |>
  drop_na(Agree) |>
  mutate(Agree = Agree/100) |>
  mutate(isCity = ifelse(University == "City University",
                         Agree,
                         NA)) |>
  mutate(Question_Order = case_match(
    Question,
    "Teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and Feedback" ~ 3,
    "Academic Support" ~ 4,
    "Organisation and Management" ~ 5,
    "Learning Resources" ~ 6,
    "Learning Community" ~ 7,
    "Student Voice" ~ 8,
    "Overall satisfaction" ~ 0
  )) |>
  mutate(Question = fct_reorder(as.factor(Question), Question_Order
  )) |>
  mutate(RankLabel = case_when(
    isCity > 0 ~ paste(Rank,"/", length(unique(Data$`Provider short name`[Data$`Subject (Capitalized first letter)`=="Politics"]))) ,
    .default = NA
  )) |>
  ggplot() +
  geom_jitter(aes(x = reorder(Question,-Question_Order),
              y = Agree,
              color = Question),
             # color = "lightgrey",
              show.legend = FALSE,
             width = 0.25,
             size = 2,
             alpha = 0.7) +
  geom_point(aes(x = Question,
                 y = isCity),
             size = 3,
             color = "darkred",
             show.legend = FALSE) +
  geom_label(aes(x = Question,
                y = 0.1,
                label = RankLabel),
            size = 3) +
  coord_flip() +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent,
                       limits = c(0,1)) +
  labs(title = "NSS Scores 2022 vs Other UK Politics Programmes",
       subtitle = "City in Red",
       x = "",
       y ="",
       color = "") +
  theme_light()  +
  scale_color_manual(values = c("lightgreen",
                     "darkgreen",
                     "lightgreen",
                     "darkgreen","lightgreen",
                     "darkgreen",
                     "lightgreen",
                     "darkgreen",
                     "lightgreen")) 
```


```{r}

Data <- read_excel("Data.xlsx", sheet = "NSS Benchmark All")



Data |>
  select(University = `Provider short name`,
         Subject = `Subject (Capitalized first letter)`,
         Question,
         Agree = `Avg. % Agree`,
         Rank = `Rank of Avg. % Agree`,
         Percentile = `Percentile of Avg. % Agree`) |>
  filter(Subject == "History") |>
  drop_na(Agree) |>
  mutate(Agree = Agree/100) |>
  mutate(isCity = ifelse(University == "City University",
                         Agree,
                         NA)) |>
  mutate(Question_Order = case_match(
    Question,
    "Teaching on my course" ~ 1,
    "Learning opportunities" ~ 2,
    "Assessment and Feedback" ~ 3,
    "Academic Support" ~ 4,
    "Organisation and Management" ~ 5,
    "Learning Resources" ~ 6,
    "Learning Community" ~ 7,
    "Student Voice" ~ 8,
    "Overall satisfaction" ~ 0
  )) |>
  mutate(Question = fct_reorder(as.factor(Question), Question_Order
  )) |>
  mutate(RankLabel = case_when(
    isCity > 0 ~ paste(Rank,"/", length(unique(Data$`Provider short name`[Data$`Subject (Capitalized first letter)`=="Politics"]))) ,
    .default = NA
  )) |>
  ggplot() +
  geom_jitter(aes(x = reorder(Question,-Question_Order),
              y = Agree,
              color = Question),
             # color = "lightgrey",
              show.legend = FALSE,
             width = 0.25,
             size = 2,
             alpha = 0.7) +
  geom_point(aes(x = Question,
                 y = isCity),
             size = 3,
             color = "darkred",
             show.legend = FALSE) +
  geom_label(aes(x = Question,
                y = 0.1,
                label = RankLabel),
            size = 3) +
  coord_flip() +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent,
                       limits = c(0,1)) +
  labs(title = "NSS Scores 2022 vs Other UK History Programmes",
       subtitle = "City in Red",
       x = "",
       y ="",
       color = "") +
  theme_light()  +
  scale_color_manual(values = c("lightgreen",
                     "darkgreen",
                     "lightgreen",
                     "darkgreen","lightgreen",
                     "darkgreen",
                     "lightgreen",
                     "darkgreen",
                     "lightgreen")) 
```


## MA Programmes

### MA Applications 

#### Number of MA Applications
```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student code",
         ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level) |>
    left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_PG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Postgraduate Taught") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
    filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
    left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_PG)) %>%
  arrange(factor(Programme))




ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
           fill = Programme),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = Programme,
                label = NumStudent),
               size = 1.8,
           colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumStudentYear +NumStudentYear*0.05,
                label = NumStudentYear),
                size = 2.5) +
  theme_classic() +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
   labs(title = "Student Applications Across PG Programmes",
       x = "Year",
       y = "Students") +
  theme(legend.position = "bottom") +
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
  
 
```


```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student code",
         ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level) |>
    left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_PG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Postgraduate Taught") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
    filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
    left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_PG)) %>%
  arrange(factor(Programme))




ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
           fill = Programme),
           stat = "identity",
           show.legend = FALSE) +
 # geom_text(aes(x = Year, 
 #               y = NumStudent,
 #               fill = Programme,
 #               label = NumStudent),
 #              size = 1.8,
  #         colour = "white",
 #            position = position_stack(vjust = 0.5),
 #           fontface = "bold") +
  geom_text(aes(x = Year, 
                y = NumStudent +8,
                label = NumStudent),
                size = 1.8) +
  theme_classic() +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
   labs(title = "Student Applications Across PG Programmes",
       x = "Year",
       y = "Students") +
  facet_wrap(~Programme) +
  theme(legend.position = "bottom") +
  theme(axis.text.x = element_text(size = 5, 
                                   angle = 90))
  
 
 
 
```

#### MA Applications by Fees


```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student code",
         ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  drop_na(Status) |>
  mutate(Programme = factor(Programme, Order_PG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Postgraduate Taught") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
    filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Status)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent)) |>
  mutate(PercStudentYear = 100*round(NumStudent/NumStudentYear, digits = 2)) 
  

ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = PercStudentYear,
           fill = Status),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = PercStudentYear,
                fill = Status,
                label = paste0(PercStudentYear,
                               "%")),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  #geom_label(aes(x = Year, 
  #              y = NumStudentYear + NumStudentYear*0.05,
 #               label = NumStudentYear),
 #               size = 2.5,
  #          fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#111e6c","#57a0d3")) +
   labs(title = "Applications to MA Programmes by Origin",
       x = "Year",
       y = "% Students")

```


#### Decision on MA Applications

```{r}

Data_Edit <- DataPGApplications |>
  rename("Year" = `Academic Year code`, 
         "Decision" = `Initial Decision`,
         "Status" = `Student Funding Category`,) |>
  mutate(Year = str_replace(Year, " Year of Entry", "")) |>
   mutate(Status = case_match(
    Status, c("EU", "Overseas") ~ "EU/Overseas",
         .default = Status
         ))  |>
  mutate(Decision = case_match(
    Decision, "R" ~ "Reject",
    "U" ~ "Unconditional",
    "C" ~ "Conditional",
    NA ~ "Not Available",
         .default = Decision
         ))  |>
  mutate(Decision = factor(Decision, c(
                                       "Unconditional",
                                       "Conditional",
                                       "Reject",
                                       "Not Available"
                                       ))) |>
  #rename("Programme" = `Full name`) |>
  select(Year, `Route code`, Decision, Status) |>
  left_join(Programme_Name, by = join_by(`Route code` == Programme_Old))|>
    mutate(Programme = factor(Programme, Order_PG)) %>%
  arrange(factor(Programme)) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Decision)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent)) |>
  mutate(PercStudentYear = 100*round(NumStudent/NumStudentYear, digits = 2)) 
  

ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
           fill = Decision),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = Decision,
                label = paste0(PercStudentYear,
                               "%")),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumStudentYear + NumStudentYear*0.05,
                label = NumStudentYear),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#111e6c","#0f52ba","#57a0d3", "#89cff0")) +
   labs(title = "Student Applications Across PG Programmes",
       x = "Year",
       y = "Students")
  #scale_y_continuous(labels = scales::percent) +
  #  ylim(0, max(1, max(Data_Edit$Perc_Progressed)+0.15)) +
#  theme(
#      axis.text.y=element_blank(),
#      axis.ticks.y=element_blank())
  
  

```

#### Conversion Rate on MA Applications

```{r}


Data_Edit <- DataPGApplications |>
  rename("Year" = `Academic Year code`, 
         "DecisionInitial" = `Initial Decision`,
         "ResponseInitial" = `Initial Response`,
          "DecisionFinal" = `Confirmation Decision`,
         "ResponseFinal" = `Confirmation Response`,
         "Status" = `Student Funding Category`,) |>
  mutate(Year = str_replace(Year, " Year of Entry", "")) |>
   mutate(Status = case_match(
    Status, c("EU", "Overseas") ~ "EU/Overseas",
         .default = Status
         ))  |>
  #rename("Programme" = `Full name`) |>
  select(Year, `Route code`, DecisionInitial, ResponseInitial,
         DecisionFinal, ResponseFinal,
         Status) |>
  left_join(Programme_Name, by = join_by(`Route code` == Programme_Old))|>
    mutate(Programme = factor(Programme, Order_PG)) %>%
  arrange(factor(Programme)) |>
  mutate(DecisionCombined = case_when(
    DecisionInitial == "U" ~ "Offer",
    DecisionFinal == "U" ~ "Offer",
    .default = NA
         ))  |>
  mutate(ResponseCombined = case_when(
    ResponseFinal == "F" ~ "Accepted",
    .default = "Not Accepted"
         ))  |>
  filter(DecisionCombined == "Offer") |>
   summarize(NumOffers = n(), 
            .by = c(Year, ResponseCombined)) |>
  group_by(Year) |>
  mutate(NumOfferYear = sum(NumOffers)) |>
  mutate(PercOfferYear = 100*round(NumOffers/NumOfferYear, digits = 2))


ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumOffers,
           fill = ResponseCombined),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumOffers,
                fill = ResponseCombined,
                label = paste0(PercOfferYear,
                               "%")),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumOfferYear + NumOfferYear*0.05,
                label = NumOfferYear),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#57a0d3","#111e6c")) +
   labs(title = "Offers Across PG Programmes",
       x = "Year",
       y = "Offers Made",
       fill = "Outcome")
  #scale_y_continuous(labels = scales::percent) +
  #  ylim(0, max(1, max(Data_Edit$Perc_Progressed)+0.15)) +
#  theme(
#      axis.text.y=element_blank(),
#      axis.ticks.y=element_blank())
   
```
 
### MA Enrollment

#### Number of MA Students

```{r}


Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UGPG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Postgraduate Taught") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
  left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_UGPG)) %>%
  arrange(factor(Programme))



ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = Programme),
           stat = "identity") +
#  geom_text(aes(x = Year, 
#                y = NumStudent,
#                fill = Programme,
#                label = NumStudent),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5),
#            fontface = "bold") +
  geom_text(aes(x = Year, 
                 y = NumStudentYear + 5,
                 label = NumStudentYear),
             size = 2.5,
             fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  labs(title = "Enrollment of New Students Across MA Programmes",
       caption = "Figure excludes returning part-time students",
       x = "",
       y = "",
       fill = "") +
  theme(legend.position = "bottom") +
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
 
     
```

```{r}

Data_Edit <- DataIPApplicationsAndEnrollment |>
  select(Student = "Student Course Join code",
         #ApplicantStatus = "Applicant Status",
         "Course Name",
         Year = "Academic Year code...13",
         Level,
         Status = `Applicant Category code`) |>
  drop_na(Student) |>
  mutate(Status_Orig = Status) |>
  mutate(FTPT = case_when(
    str_sub(Status, 1, 1)=="F" ~ "FT",
    str_sub(Status, 1, 1)=="P" ~ "PT",
  )) |>
  mutate(Status = str_sub(Status, 2, nchar(Status))) |>
  mutate(Status = case_match(
    Status, 
    "HH" ~ "Home",
    "OS" ~ "EU/Overseas",
    "HE" ~ "EU/Overseas",
    .default = NA
  )) |>
  left_join(Programme_Name, by = join_by(`Course Name` == Programme_Old))|>
  #select(-`Course Name`) |>
  drop_na(Programme) |>
  mutate(Programme = factor(Programme, Order_UGPG)) %>%
  arrange(factor(Programme)) |>
  filter(Level == "Postgraduate Taught") |>
  filter(Year %in% c("2014/5", "2015/6", "2016/7", "2017/8",
                     "2018/9", "2019/0", "2020/1", "2021/2",
                     "2022/3", "2023/4")) |>
  filter(!(Year == "2023/4")) |>
  filter(!(Year == "2017/8" & Programme == "BA History" )) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Programme)) |>
  left_join(Custom_Col, by = join_by(Programme == Label)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  mutate(Programme = factor(Programme, Order_UGPG)) %>%
  arrange(factor(Programme))




ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = Programme),
           stat = "identity",
           show.legend = FALSE) +
#  geom_text(aes(x = Year, 
#                y = NumStudent,
#                fill = Programme,
#                label = NumStudent),
#            size = 2,
#            colour = "white",
#            position = position_stack(vjust = 0.5),
#            fontface = "bold") +
  geom_text(aes(x = Year, 
                 y = NumStudent + 1.2,
                 label = NumStudent),
             size = 2.3,
             fontface = "bold") +
  theme_light() +
  scale_fill_manual(values = unique(Data_Edit$Custom_Colour)) +
  labs(title = "Enrollment of New Students in Individual MA Programmes",
       caption = "Figure excludes returning part-time students",
       x = "",
       y = "",
       fill = "") +
  theme(legend.position = "top") +
  facet_wrap(~Programme) +
  guides(fill=guide_legend(nrow=2, byrow=TRUE)) +
    theme(axis.text.x = element_text(size = 5))
 
 
```



#### Full time vs. Part time

```{r}


Data_Edit <- DataPGEnrollment |>
  rename("Year" = `Ac.Year`) |>
  rename("FullPart" = `MofA`) |>
  rename("Country" = `Domicile`) |>
  rename("Age" = `Age on Entry`) |>
  select(RouteCode, Year, FullPart, Country, Age) |>
    mutate(FullPart = case_when(
    str_detect(FullPart, "Dormant") ~ "Dormant",
    str_detect(FullPart, "dormant") ~ "Dormant",
    .default = FullPart)) |>
  left_join(Programme_Name, by = join_by(`RouteCode` == Programme_Old)) |>
  summarize(NumStudent = n(),
            .by = c(Year, FullPart)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  

ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
           fill = FullPart),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = FullPart,
                label = NumStudent),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumStudentYear + NumStudentYear*0.08,
                label = NumStudentYear),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#0f52ba", "#57a0d3", "#89cff0")) +
   labs(title = "Enrollment Across MA Programmes",
       x = "Year",
       y = "Students",
       fill = "Mode of Attendance")    


```




### MA Awards


#### MA Awards Classification

```{r}

  
Data_Edit <- DataPGAwards |>
  rename("Year" = `Academic Year code`) |>
  #rename("Programme" = `Full name`) |>
  rename("Rank" = `Award Level`) |>
  rename("Average" = `Award Mark`) |>
  select(Year, `Route code`, Rank, Average) |>
  left_join(Programme_Name, by = join_by(`Route code` == Programme_Old)) |>
  mutate(Rank = case_match(
    Rank, "Postgradaute Diploma" ~ "Postgraduate Certificate",
         .default = Rank
  )) |>
  mutate(Rank = fct_relevel(Rank, c("Distinction","Merit", "No Classification", "Postgraduate Certificate"))) |>
  filter(Year != "2022/3") |>
  group_by(Year) |>
  mutate(Total_Students = n()) |>
  ungroup() |>
  group_by(Year, Rank, Total_Students) |>
  summarise(Num_Student = n()) |>
  mutate(Perc_Students = Num_Student/Total_Students) 

ggplot(Data_Edit) +
  geom_col(aes(x = Year,
           y = Perc_Students,
           fill = Rank),
           position = "fill") +
geom_text(aes(x = Year, 
                y = Perc_Students,
                fill = Rank,
                label = paste0(round(Perc_Students, digits = 2)*100,"%")),
                size = 2,
            #fill = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold",
           label.padding = unit(0.2, "lines"),
           show.legend = FALSE) +
  scale_y_continuous(labels = scales::percent) +
  theme_classic() +
   labs(title = "Final Degree Classification Across all MA Programmes",
       x = "Year",
       y = "% Students") +
  scale_fill_brewer(palette = "Blues") +
    theme(legend.position = "top") 

  
 

```

```{r}

Data_Edit <- DataPGAwards |>
  rename("Year" = `Academic Year code`) |>
  #rename("Programme" = `Full name`) |>
  rename("Rank" = `Award Level`) |>
  rename("Average" = `Award Mark`) |>
  select(Year, `Route code`, Rank, Average) |>
  left_join(Programme_Name, by = join_by(`Route code` == Programme_Old)) |>
  mutate(Rank = case_match(
    Rank, "Postgradaute Diploma" ~ "Postgraduate Certificate",
         .default = Rank
  )) |>
  mutate(Rank = fct_relevel(Rank, c("Distinction","Merit", "No Classification", "Postgraduate Certificate"))) |>
  filter(Year != "2022/3")  |>
  group_by(Programme, Year) |>
  mutate(Total_Students = n()) |>
  ungroup() |>
  group_by(Programme, Year, Rank, Total_Students) |>
  summarise(Num_Student = n()) |>
  mutate(Perc_Students = Num_Student/Total_Students)




ggplot(Data_Edit) +
  geom_col(aes(x = Year,
           y = Perc_Students,
           fill = Rank),
           position = "fill") +
geom_text(aes(x = Year, 
                y = Perc_Students,
                fill = Rank,
                label = paste0(round(Perc_Students, digits = 2)*100,"%")),
                size = 2,
            #fill = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold",
           label.padding = unit(0.2, "lines"),
           show.legend = FALSE) +
  facet_wrap(~Programme) +
  scale_y_continuous(labels = scales::percent) +
  theme_light() +
   labs(title = "Final Degree Classification by MA Programmes",
       x = "Year",
       y = "% Students") +
  scale_fill_brewer(palette = "Blues") +
    theme(legend.position = "top") 

 

```

#### Final Average Mark

```{r}

Data_Edit <- DataPGAwards |>
  rename("Year" = `Academic Year code`) |>
  #rename("Programme" = `Full name`) |>
  rename("Rank" = `Award Level`) |>
  rename("Average" = `Award Mark`) |>
  select(Year, `Route code`, Rank, Average) |>
  left_join(Programme_Name, by = join_by(`Route code` == Programme_Old)) |>
  mutate(Rank = case_match(
    Rank, "Postgradaute Diploma" ~ "Postgraduate Certificate",
         .default = Rank
  )) |>
  mutate(Rank = fct_relevel(Rank, c("Distinction","Merit", "No Classification", "Postgraduate Certificate"))) |>
  filter(Year != "2022/3")   
   



Order_Rank <- c("Distinction",
                "Merit", 
                "No Classification", 
                "Postgraduate Certificate")


Data_Edit_summary <- Data_Edit |>
  filter(Year != "2022/3") |>
  group_by(Year) %>% 
  summarize(Year_Median = median(Average, na.rm=T),
            Year_Distinction = sum(Rank=="Distinction"),
            Year_Merit = sum(Rank=="Merit"),
            Year_NoClassification = sum(Rank=="No Classification"),
            Year_PostgraduateCertificate = sum(Rank=="Postgraduate Certificate"),
            Total_Student = n()) |>
  mutate(Perc_Distinction = round(Year_Distinction/Total_Student, digits = 2),
         Perc_Merit = round(Year_Merit/Total_Student, digits = 2),
         Perc_NoClassification = round(Year_NoClassification/Total_Student, digits = 2),
         Perc_PostgraduateCertificate = round(Year_PostgraduateCertificate/Total_Student, digits = 2))

Data_Edit |>
  mutate(Rank = factor(Rank, Order_Rank)) |>
  arrange(factor(Rank)) |>
  filter(Year != "2022/3") |>
  arrange() |>
  ggplot() +
  stat_density_ridges(aes(x = Average,
                   y = Year,
                   fill = case_when(
                     ..x..<50 ~ "1. Lower Qualification",
                     ..x..<60 & ..x..>= 50 ~ "2. No Classification",
                     ..x..<70 & ..x..>= 60 ~ "3. Merit",
                     ..x..>= 70 ~ "4. Distinction"
                   )), 
                   rel_min_height = 0.005,
                   scale = 1.2,
                   geom = "density_ridges_gradient", quantile_lines = TRUE,
                   vline_size = 1, vline_color = "red",
                   quantiles = 2) +
  geom_text(data = Data_Edit_summary,
            aes(x = Year_Median,
                y = Year,
                label= round(Year_Median, digits = 1)),
            colour = "red",
            size = 2,
            fontface = "bold",
             position=position_nudge(y=0.5,
                                     x = 1.9)) +
  geom_richtext(data = Data_Edit_summary,
                aes(x = 90, 
                y = Year,
                label = paste0("Distinction: **",
                               100*Perc_Distinction,
                               "%",
                               "**",
                               " (",
                               Year_Distinction,
                               ")",
                               "<br>", 
                               "Merit: **",
                               100*Perc_Merit,
                               "%",
                               "**",
                               " (",
                               Year_Merit,
                               ")",
                               "<br>", 
                               "No Classification: **",
                               100*Perc_NoClassification,
                               "%",
                               "**",
                               " (",
                               Year_NoClassification,
                               ")",
                               "<br>", 
                               "Lower: **",
                               100*Perc_PostgraduateCertificate,
                               "%",
                               "**",
                               " (",
                               Year_PostgraduateCertificate,
                               ")"
                               )),
                size = 2,
            nudge_y = 0.50,
            fill = NA,
            label.color = NA,
            lineheight = 1) +
  theme_ridges() +
  scale_fill_manual(name = NULL, 
                    values = c("1. Lower Qualification" = "#111e6c",
                "2. No Classification" = "#0f52ba",
                "3. Merit" = "#57a0d3",
                "4. Distinction" = "#89cff0")
                    ) +
  theme(legend.position = "none") +
  scale_x_continuous(
    breaks =  c(40, 50, 60, 70, 80, 90),
    limits = c(35, 95)) +
  labs(title = "Final Degree Classification across MA Programmes",
       subtitle = "Median Final Mark in Red",
       x = "Final Mark Average"
       )

    


```


#### Reasons for MA withdrawal

```{r}
 
Data <- read_excel("Data.xlsx", sheet = "PG Withdrawals") 

Data_Edit <- Data |>
  rename(Cause = "RFT2") |>
  drop_na(Cause) |>
  count(Cause)  |>
  rename(Total = n) |>
  mutate(Cause = fct_reorder(Cause, Total))
 

ggplot(Data_Edit) +
  geom_col(aes(x = fct_reorder(Cause, Total),
               y = Total,
               fill = Cause),
           position = position_stack(reverse = TRUE)) +
  coord_flip() +
  geom_label(aes(x = fct_reorder(Cause, Total),
               y = - 1,
               label = Total
               ),
             size = 3)  +
  labs(title = "Most Common Reasons for Student Withdrawal",
       subtitle = "All MA Programmes - 2018-2022",
       x = "",
       y = "") + 
    theme_classic() +
  theme(legend.position = "top") +
  scale_fill_brewer(palette = "Blues")
  
```

### After Graduation

```{r}
 



Temp1 <- DataEmploymentGOS |>
  select(Year = `GOS year`,
         Course = `Route code`,
         Level = `Study level (3 way)`,
         Outcome = `Positive/negative outcome`,
         Response = `Response status`,
         Activity = `Main activity`,
         Duty = `Business or self-employment employer duties`,
         Business_Name = `Business or self-employment employer name`,
         Salary = `Salary annually`,
         Currency = `Salary currency`)

 

Temp2 <- DataEmploymentDHLE |>
  select(Year,
         Course = `Course_code`,
         Outcome,
         Business_Name = `Employer_name`,
         Salary = `Actual_salary`,
         Currency,
         Response,
         Activity = HESA_categories
         ) 




Data_Edit <- bind_rows(Temp1, Temp2) |>
  mutate(Year = case_match(
    Year,
    "2017-2018" ~ "2017/18",
    "2018-2019" ~ "2018/19",
    "2019-2020" ~ "2019/20",
    "2020-2021" ~ "2020/21",
    .default = Year)) |>
  mutate(Outcome = case_match(
    Outcome,
    "Positive outcome" ~ "Positive Outcome",
    "Negative outcome" ~ "Negative Outcome",
    "Unemployed" ~ "Negative Outcome",
    "Other" ~ NA,
    "Non-Respondent" ~ NA,
    "Refusal" ~ NA,
    "Working or studying" ~ NA,
    "X" ~ NA,
    .default = Outcome)
    ) |>
  drop_na(Outcome) |>
  mutate(Level = case_match(
    Course,
    "IPUIPO" ~ "UG",
    "IPPIPO" ~ "PG",
    .default = Level
  )) |>
  filter(Level == "PG") |>
   group_by(Year) |>
  mutate(Num_Total = n()) |>
  ungroup() |>
  group_by(Year, Num_Total, Outcome) |>
  summarise(Num_Outcome = n()) |>
  ungroup() |>
  mutate(Perc_Outcome = Num_Outcome/Num_Total) |>
  filter(Outcome == "Positive Outcome")
  
  

ggplot(Data_Edit) +
  geom_col(aes(x = Year,
                 y = Perc_Outcome ),
           fill = "#0f52ba") +
   geom_text(aes(x = Year, 
                y = Perc_Outcome+0.05,
                label = paste0(round(100*Perc_Outcome),"%",
                               " ",
                               "(",
                               Num_Outcome,
                               ")")),
                size = 2,
            fontface = "bold") +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
   labs(title = "PG Students Reporting Positive Outcomes after Graduation ",
        caption = "“Positive Outcomes” = UK-domiciled students in graduate-level employment \nor further study, including study completed before the census date.  \n This measure excludes those not available for work or further study \n because they were travelling, caring or “doing  something else” from the population.",
       x = "",
       y = "% Students",
       fill = "") +
    theme(legend.position = "top") 


```


## PhD Programme

### PhD Applications and Offers
```{r}



Data_Edit <- DataPhDApplications |>
  rename("Year" = `Academic Year`, 
         "Status" = `Fee Status`) |>
  filter(Year != "2013/4") |>
   filter(Year != "2023/4") |>
  mutate(Response = case_when(
    `Response 2` == "Firmly accept offer" ~ "Accepted",
    (`Response 1` == "Firmly accept offer") & (`Decision 1` == "Unconditional Offer") ~ "Accepted",
  )) |>
  mutate(Decision = case_when(
    `Decision 2` == "Unconditional Offer" ~ "Offer",
    `Decision 1` == "Unconditional Offer" ~ "Offer",
    `Decision 1` == "Conditional Offer" ~ "Offer",
    is.na(`Decision 1`) ~ "Not Available", 
    .default = `Decision 1`
  )) |>
  select(Year,`Response 1`, `Response 2`, Response, 
         `Decision 1`, `Decision 2`, Decision, Nationality) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Decision)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  





ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
           fill = Decision),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = Decision,
                label = NumStudent),
                size = 2.5,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumStudentYear + 2,
                label = NumStudentYear),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_brewer(palette = "BuPu") +
   labs(title = "Student Applications - MPhil/PhD in International Politics",
       x = "Year",
       y = "Applications") 
 


```


```{r}
Data_Edit <- DataPhDApplications |>
  rename("Year" = `Academic Year`, 
         "Status" = `Fee Status`) |>
  filter(Year != "2013/4") |>
   filter(Year != "2023/4") |>
  mutate(Response = case_when(
    `Response 2` == "Firmly accept offer" ~ "Accepted",
    (`Response 1` == "Firmly accept offer") & (`Decision 1` == "Unconditional Offer") ~ "Accepted",
    .default = "Rejected"
  )) |>
  mutate(Decision = case_when(
    `Decision 2` == "Unconditional Offer" ~ "Offer",
    `Decision 1` == "Unconditional Offer" ~ "Offer",
    `Decision 1` == "Conditional Offer" ~ "Offer",
    is.na(`Decision 1`) ~ "Not Available", 
    .default = `Decision 1`
  )) |>
  select(Year,`Response 1`, `Response 2`, Response, 
         `Decision 1`, `Decision 2`, Decision, Nationality) |>
  filter(Decision == "Offer") |>
  summarize(NumStudent = n(), 
            .by = c(Year, Response)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  





ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
           fill = Response),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = Response,
                label = NumStudent),
                size = 2.5,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumStudentYear + 2,
                label = NumStudentYear),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#3c1361", "#7c5295")) +
   labs(title = "Offers - MPhil/PhD in International Politics",
       x = "Year",
       y = "Offers") 
 

```


```{r}
Data_Edit <- DataPhDApplications |>
  rename("Year" = `Academic Year`, 
         "Status" = `Fee Status`) |>
  filter(Year != "2013/4") |>
   filter(Year != "2023/4") |>
  mutate(Response = case_when(
    `Response 2` == "Firmly accept offer" ~ "Accepted",
    (`Response 1` == "Firmly accept offer") & (`Decision 1` == "Unconditional Offer") ~ "Accepted",
    .default = "Rejected"
  )) |>
  mutate(Decision = case_when(
    `Decision 2` == "Unconditional Offer" ~ "Offer",
    `Decision 1` == "Unconditional Offer" ~ "Offer",
    `Decision 1` == "Conditional Offer" ~ "Offer",
    is.na(`Decision 1`) ~ "Not Available", 
    .default = `Decision 1`
  )) |>
  select(Year,`Response 1`, `Response 2`, Response, 
         `Decision 1`, `Decision 2`, Decision, Nationality) |>
  count(Nationality) |>
  mutate(Percentage = round(100*(n/sum(n)), digits = 2)) |>
  arrange(desc(Percentage)) |>
  mutate(Nationality = countryname(Nationality, destination = "cldr.short.en", warn = TRUE))
   




#Load World Map

world <- ggplot2::map_data("world")

world2 <- world |> mutate(region = countryname(region, destination = "cldr.short.en", warn = TRUE))

#Join the world map and gapminder

world2 <- left_join(world2, Data_Edit, by = c("region" = "Nationality"))


#Plot 
ggplot(data = world2) + 
  geom_map(map = world2, aes(
    x = long, 
    y = lat, 
    map_id = region, 
    fill = Percentage)) + 
  theme_map() + 
  labs(title = "Nationality of PhD Applicants 2014-2022") + scale_fill_gradient(high = "#3c1361", low = "#e1d5ed", na.value = "lightgrey")

```

### PhD Enrollment

```{r}


Data_Edit <- DataPhDEnrolled |>
  rename("Year" = `Academic Year code`) |>
  select(Year) |>
  summarize(NumStudent = n(), 
            .by = c(Year))



ggplot(Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent),
           stat = "identity",
           fill = "#7c5295") +
  geom_text(aes(x = Year, 
                y = NumStudent + 0.2,
                label = NumStudent),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
   labs(title = "Student Enrollment - MPhil/PhD in International Politics",
       x = "Year",
       y = "Students") 
```

### PhD Duration

```{r}




Data_Edit <- DataPhDEnrolled |>
  rename("Year" = `Academic Year code`) |>
  rename(Outcome = RFT) |>
  mutate(Outcome = case_when(
    Outcome == "Successful completion of course" ~ "Successful completion",
    is.na(Outcome) & is.na(`End date`) & is.na(Award) ~ "Ongoing",
    is.na(Outcome)==F & Outcome != "Successful completion of course" ~ "Not Completed",
    .default = NA
  )) |>
  select(Year, Outcome) |>   
  drop_na(Outcome) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Outcome)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent)) 


ggplot(data = Data_Edit) +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = Outcome),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = Outcome,
                label = NumStudent),
            size = 2.5,
            colour = "white",
            position = position_stack(vjust = 0.5),
            fontface = "bold") +
  # geom_label(aes(x = Year, 
  #               y = NumStudentYear + 0.5,
  #               label = NumStudentYear),
  #                size = 2.5,
  #            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#3c1361", "#7c5295", "#c3b2d4")) +
  labs(title = "Outcomes - MPhil/PhD in International Politics",
       x = "Year of Enrollment",
       y = "Students") 

```




```{r}

 
Data_Edit <- DataPhDEnrolled |>
  rename("Year" = `Academic Year code`) |>
  rename("Duration" = `Duration Years`) |>
  select(Year, Duration) |>   
  drop_na(Duration)



ggplot(Data_Edit) +
  #geom_boxplot(aes(x = Year,
  #             y = Duration)) +
  geom_jitter(aes(x = Year,
               y = Duration),
               color = "#7c5295") +
  theme_light() +
   labs(title = "Years Before Completion of the PhD",
        subtitle = paste0("Median: " , round(median(DataPhDEnrolled$`Duration Years`, na.rm = T), digits = 1), "\nAverage: ", round(mean(Data$`Duration Years`, na.rm = T), digits = 1)),
       x = "Enrollment Year",
       y = "Number of Students") +
  scale_y_continuous(breaks=seq(0,10,by=2)) +
  ylim(0,10) 
 


```

### PhD Outcomes

```{r}



Data_Edit <- DataPhDEnrolled |>
  rename("Year" = `Academic Year code`) |>
  rename(Outcome = RFT) |>
  mutate(Outcome = case_when(
    Outcome == "Successful completion of course" ~ "Successful completion",
    is.na(Outcome) & is.na(`End date`) & is.na(Award) ~ "Ongoing",
    is.na(Outcome)==F & Outcome != "Successful completion of course" ~ "Not Completed",
    .default = NA
  )) |>
    select(Year, Outcome) |>   
    drop_na(Outcome) |>
  summarize(NumStudent = n(), 
            .by = c(Year, Outcome)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent)) 


ggplot(data = Data_Edit) +
 geom_bar(aes(x = Year,
               y = NumStudent,
           fill = Outcome),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = Outcome,
                label = NumStudent),
                size = 2.5,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
 # geom_label(aes(x = Year, 
 #               y = NumStudentYear + 0.5,
 #               label = NumStudentYear),
#                size = 2.5,
#            fontface = "bold") +
  theme_classic() +
    scale_fill_manual(values = c("#3c1361", "#7c5295", "#c3b2d4")) +
   labs(title = "Outcomes - MPhil/PhD in International Politics",
       x = "Year of Enrollment",
       y = "Students") 

```



## Student Support and Resources

### Year Out

```{r}



Data_Edit <- DataEnrollment |>
  select(Student = `Student Course Join code`,
         StudentUnique = `Student code`,
         Block,
         Year = `Academic Year code`,
         Course = `Course code`,
         Level = `Course Grp`) |>
  filter(Level == "Undergrad Degree") |>
  group_by(Year) |>
  summarize(TotalY2 = sum(Block=="21"),
            TotalY3 = sum(Block=="31"),
            TotalYO = sum(Block=="YO")) |>
  mutate(PercYO = case_when(
    Year == "2014/5" ~ NA,
    Year %in% c("2015/6", "2016/7") ~ TotalYO/(TotalYO+TotalY2),
    Year %in% c("2017/8", "2018/9", "2019/0", "2020/1", "2021/2", "2022/3") ~ TotalYO/(TotalYO+TotalY3)))

  

ggplot(Data_Edit) +
  geom_col(aes(x = Year,
               y = PercYO),
           fill = "#8a0407") +
  geom_text(aes(x = Year, 
                y = PercYO,
                label = paste0(round(100*PercYO),"%",  " (",TotalYO,")")),
            size = 2,
            nudge_y = 0.002,
            fontface = "bold") +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "UG Students Spending a Year Out (Placement or Exchange)",
       x = "",
       y = "% Students",
       fill = "") 
  
```

### Microplacement

```{r}
Data <- read_excel("Data.xlsx", sheet = "MPP Applications") 

Data |>
  rename(Year = `Academic Year`) |>
  mutate(WP = case_match(
    WP, "WP-H" ~ "WP",
         .default = WP
  )) |>
  summarize(NumStudent = n(),
            .by = c(Year, WP)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  ggplot() +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = WP),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = WP,
                label = NumStudent),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumStudentYear + NumStudentYear*0.08,
                label = NumStudentYear),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#ad0509", "#fa6a6d")) +
   labs(title = "Applications to the MicroPlacement",
        subtitle = "UG Students from IP Department",
       x = "Year",
       y = "Students",
       fill = "Widening Participation")  +
  theme(legend.position = "bottom")
```

```{r}
Data <- read_excel("Data.xlsx", sheet = "MPP Placements") 



Data |>
  rename(WP = `WP Status`) |>
  mutate(WP = case_match(
    WP, "WP-H" ~ "WP",
    "N" ~ "Not WP",
    "Y" ~ "WP",
             .default = WP
  )) |>
   summarize(NumStudent = n(),
            .by = c(Year, WP)) |>
  group_by(Year) |>
  mutate(NumStudentYear = sum(NumStudent))  |>
  ggplot() +
  geom_bar(aes(x = Year,
               y = NumStudent,
               fill = WP),
           stat = "identity") +
  geom_text(aes(x = Year, 
                y = NumStudent,
                fill = WP,
                label = NumStudent),
                size = 2,
            colour = "white",
             position = position_stack(vjust = 0.5),
            fontface = "bold") +
  geom_label(aes(x = Year, 
                y = NumStudentYear + NumStudentYear*0.08,
                label = NumStudentYear),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
  scale_fill_manual(values = c("#ad0509", "#fa6a6d")) +
   labs(title = "MicroPlacement from UG Students from IP Department",
       x = "Year",
       y = "Students",
       fill = "Widening Participation")  +
  theme(legend.position = "bottom")
```

```{r}
Data <- read_excel("Data.xlsx", sheet = "MPP Summary") 
 


Data |>
  filter(Type == "MPP") |>
  ggplot() +
  geom_bar(aes(x = Year,
               y = Students),
           stat = "identity",
           fill = "#ad0509") +
  geom_label(aes(x = Year, 
                y = Students + 1,
                label = Students),
                size = 2.5,
            fontface = "bold") +
  theme_classic() +
   labs(title = "MicroPlacements Completed from UG Students from IP Department",
       x = "Year",
       y = "Students")
  

```